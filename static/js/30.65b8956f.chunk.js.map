{"version":3,"sources":["containers/Dashboard/components/Timestamp/index.js","containers/CodToOnline/action.js","containers/CodToOnline/components/Table/index.js","containers/CodToOnline/components/UpdatePaymentType/index.js","containers/CodToOnline/index.js"],"names":["timestampFilter","filter","row","_original","id","String","getDateTime","toLocaleLowerCase","includes","value","Timestamp","props","getPaymentTypeDetailsAction","dispatch","showLoader","getPaymentTypeUpdateDetails","then","response","data","hideLoader","status","type","GET_PAYMENT_TPYE_UPDATE_DETAILS","catch","error","handleError","resetUpdatedPaymentTypeDetails","RESET_UPDATED_PAYMENT_TYPE_DETAILS","updatePaymentTypeAction","updatePaymentType","UPDATE_PAYMENT_TYPE_SUCCSESS","updatePaymentTypeSuccess","toast","success","message","Table","Component","render","UpdatedPaymentDetails","this","filterable","minRows","pageSize","PaginationComponent","NoDataComponent","defaultFilterMethod","columns","Header","maxWidth","Cell","index","accessor","minWidth","original","updated_by_role","updated_by_name","UpdatePaymentType","constructor","super","resetForm","setState","order_id","payment_via","payment_ref_id","enableSubmit","validateForm","state","validForm","every","field","handleChange","event","fieldName","target","name","fieldValue","payload","console","log","componentWillReceiveProps","reset","className","onChange","placeholder","getPaymentResourcesToShow","map","resource","Button","label","onClick","disabled","CodToOnline","getNoStock","componentDidMount","refreshPaymentTypeDetails","componentWillUnmount","userDetails","PageHeader","header","count","userRole","Array","isArray","results","length","connect","ownProps","codToOnlineDetails","paymentTypeDetails","bindActionCreators"],"mappings":"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","file":"static/js/30.65b8956f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { getDateTime } from '../../../../config/time';\r\n\r\nconst Timestamp = (props) => {\r\n    if (props.value) {\r\n        return <div>{getDateTime(props.value)}</div>\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport const timestampFilter = (filter, row) => {\r\n    return row._original[filter.id] && String(getDateTime(String(row._original[filter.id]))).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())\r\n}\r\n\r\nexport default Timestamp;","import {\r\n    GET_PAYMENT_TPYE_UPDATE_DETAILS,\r\n    RESET_UPDATED_PAYMENT_TYPE_DETAILS,\r\n    UPDATE_PAYMENT_TYPE_SUCCSESS\r\n} from \"./constants\";\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\nimport handleError from \"../../errorHandler\";\r\nimport { getPaymentTypeUpdateDetails, updatePaymentType } from \"../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport function getPaymentTypeDetailsAction() {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        getPaymentTypeUpdateDetails()\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                if (response.status === 200) {\r\n                    dispatch(getpaymentUpdateDetailSuccess(response.data));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getpaymentUpdateDetailSuccess(data) {\r\n    return {\r\n        type: GET_PAYMENT_TPYE_UPDATE_DETAILS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function resetUpdatedPaymentTypeDetails() {\r\n    return {\r\n        type: RESET_UPDATED_PAYMENT_TYPE_DETAILS\r\n    }\r\n}\r\n\r\nexport function updatePaymentTypeAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        updatePaymentType(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(updatePaymentTypeSuccess(response.data));\r\n                toast.success(response.data.message || \"Success.\");\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function updatePaymentTypeSuccess(data) {\r\n    return {\r\n        type: UPDATE_PAYMENT_TYPE_SUCCSESS,\r\n        data\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n// import getDateTime from '../../../../config/time';\r\nimport Timestamp from '../../../Dashboard/components/Timestamp';\r\n\r\nexport default class Table extends Component {\r\n    render() {\r\n        let { UpdatedPaymentDetails } = this.props;\r\n        // console.log(\"tabledata\", UpdatedPaymentDetails)\r\n        return (\r\n            <ReactTable\r\n                data={UpdatedPaymentDetails}\r\n                filterable\r\n                minRows={0}\r\n                pageSize={999}\r\n                PaginationComponent={() => null}\r\n                //     <PaginationComponent\r\n                //         dropDownValues={dropDownValues}\r\n                //         onLimitChange={this.onLimitChange}\r\n                //         offset={this.state.offset}\r\n                //         total={this.state.total}\r\n                //         limit={this.state.limit}\r\n                //         onPrevClick={this.handleClick}\r\n                //         onNextClick={this.handleClick}\r\n                //     />\r\n                // }\r\n                NoDataComponent={() => null}\r\n                defaultFilterMethod={(filter, row) =>\r\n                    String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                columns={[{\r\n                    Header: 'S.No',\r\n                    id: 'row',\r\n                    maxWidth: 50,\r\n                    filterable: false,\r\n                    Cell: (row) => <div>{row.index + 1}</div>\r\n                }, {\r\n                    Header: \"OrderID\",\r\n                    accessor: \"order_random_id\",\r\n                    minWidth: 200,\r\n                }, {\r\n                    Header: \"Old Payment Type\",\r\n                    accessor: \"old_payment_type\",\r\n                    minWidth: 160,\r\n                }, {\r\n                    Header: \"New Payment Type\",\r\n                    accessor: \"new_payment_type\",\r\n                    minWidth: 160,\r\n                }, {\r\n                    Header: \"Payment Via\",\r\n                    accessor: \"payment_via\",\r\n                    minWidth: 180,\r\n                }, {\r\n                    Header: \"Payment Ref Number\",\r\n                    accessor: \"payment_tracking_id\",\r\n                    minWidth: 180,\r\n                }, {\r\n                    Header: \"Updated By Role / Name\",\r\n                    accessor: \"updated_data\",\r\n                    minWidth: 240,\r\n                    // Cell: this.customCell\r\n                    Cell: (props) => <div><span>{props.original.updated_by_role}</span>{props.original.updated_by_name && ` / ${props.original.updated_by_name}`}</div>\r\n                }, {\r\n                    Header: \"Created On\",\r\n                    accessor: \"create_timestamp\",\r\n                    minWidth: 180,\r\n                    Cell: Timestamp\r\n                }\r\n                ]}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport Button from '../../../../components/Button';\r\nimport { getPaymentResourcesToShow } from '../../../../config/payments';\r\n\r\nexport default class UpdatePaymentType extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                order_id: \"\",\r\n                payment_via: \"\",\r\n                payment_ref_id: \"\"\r\n            },\r\n            enableSubmit: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.reset) {\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            data: {\r\n                order_id: \"\",\r\n                payment_via: \"\",\r\n                payment_ref_id: \"\"\r\n            },\r\n            enableSubmit: false\r\n        });\r\n    }\r\n\r\n    validateForm = () => {\r\n        let { data } = this.state;\r\n        let validForm = false;\r\n        let requiredFields = [\"order_id\", \"payment_via\", \"payment_ref_id\"];\r\n        validForm = requiredFields.every(field => data[field] !== \"\");\r\n        this.setState({ enableSubmit: validForm });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let fieldName = event.target.name;\r\n        let fieldValue = event.target.value;\r\n        let { data } = this.state;\r\n\r\n        // switch (fieldName) {\r\n        data[fieldName] = fieldValue;\r\n        // break;\r\n        // }\r\n        this.setState({ data }, () => {\r\n            this.validateForm();\r\n        });\r\n    }\r\n\r\n    updatePaymentType = () => {\r\n        let { data } = this.state;\r\n        let payload = {\r\n            ...data,\r\n            // \"requested_by_role\": this.props.userRole,\r\n            // \"requested_by_id\": this.props.userDetails.login_id\r\n        };\r\n        console.log(\"payload\", payload)\r\n        this.props.updatePaymentTypeAction(payload);\r\n    }\r\n\r\n    render() {\r\n        let { data } = this.state;\r\n        // let { userRole, userDetails } = this.props;\r\n        // console.log(\"inside update payment type\", userDetails, userRole)\r\n\r\n        return (\r\n            <div className=\"payment-type-update-container\">\r\n\r\n                <div className=\"field-container\">\r\n                    <input\r\n                        name=\"order_id\"\r\n                        className=\"input-field\"\r\n                        onChange={this.handleChange}\r\n                        value={data[\"order_id\"]}\r\n                        placeholder=\"Order Id\"\r\n                    />\r\n                    <select className=\"custom-dropdown payment-select\"\r\n                        name=\"payment_via\"\r\n                        value={data[\"payment_via\"]}\r\n                        onChange={this.handleChange}>\r\n                        <option value=\"\">Select Payment Source</option>\r\n                        {getPaymentResourcesToShow('codToOnline').map(resource => <option>{resource.name}</option>)}\r\n                    </select>\r\n                    <input\r\n                        name=\"payment_ref_id\"\r\n                        className=\"input-field\"\r\n                        onChange={this.handleChange}\r\n                        value={data[\"payment_ref_id\"]}\r\n                        placeholder=\"Payment Ref Id\"\r\n                    />\r\n                    <Button\r\n                        label={\"Convert\"}\r\n                        className=\"payment-btn\"\r\n                        onClick={this.updatePaymentType}\r\n                        disabled={!this.state.enableSubmit}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport './style.scss';\r\nimport { getPaymentTypeDetailsAction, resetUpdatedPaymentTypeDetails, updatePaymentTypeAction } from './action';\r\nimport UpdatePaymentDetailsTable from './components/Table';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport UpdatePaymentType from './components/UpdatePaymentType';\r\n\r\nconst currentRole = \"OPS\";\r\nclass CodToOnline extends Component {\r\n\r\n    state = {};\r\n\r\n    componentDidMount() {\r\n        this.props.getPaymentTypeDetailsAction();\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.refreshPaymentTypeDetails) {\r\n            this.props.getPaymentTypeDetailsAction();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetUpdatedPaymentTypeDetails();\r\n    }\r\n\r\n    getNoStock = () => <div>No Data...</div>\r\n\r\n    render() {\r\n        let title = \"CONVERT COD TO ONLINE\"\r\n        let { UpdatedPaymentDetails, userDetails } = this.props;\r\n        // console.log(\"details\", UpdatedPaymentDetails)\r\n\r\n        return (\r\n            <div className=\"payment-container\">\r\n                <PageHeader\r\n                    header={title}\r\n                    count={UpdatedPaymentDetails && UpdatedPaymentDetails.count}\r\n                />\r\n                <div className=\"payment-update-container\">\r\n                    <UpdatePaymentType\r\n                        userRole={currentRole}\r\n                        userDetails={userDetails}\r\n                        reset={this.props.refreshPaymentTypeDetails}\r\n                        updatePaymentTypeAction={this.props.updatePaymentTypeAction}\r\n                    />\r\n                    {UpdatedPaymentDetails &&\r\n                        Array.isArray(UpdatedPaymentDetails.results) &&\r\n                        UpdatedPaymentDetails.results.length > 0\r\n                        ?\r\n                        <div className=\"payment-update-table\">\r\n                            <UpdatePaymentDetailsTable\r\n                                UpdatedPaymentDetails={UpdatedPaymentDetails.results}\r\n                            />\r\n                        </div>\r\n                        :\r\n                        this.getNoStock()\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        userDetails: state.userDetails,\r\n        UpdatedPaymentDetails: state.codToOnlineDetails.paymentTypeDetails,\r\n        refreshPaymentTypeDetails: state.codToOnlineDetails.refreshPaymentTypeDetails\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        getPaymentTypeDetailsAction,\r\n        resetUpdatedPaymentTypeDetails,\r\n        updatePaymentTypeAction\r\n    }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CodToOnline);\r\n"],"sourceRoot":""}