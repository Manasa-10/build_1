{"version":3,"sources":["../node_modules/@material-ui/core/esm/TextField/TextField.js","containers/TotalCalls/components/TableMissCalls/index.js","containers/TotalCalls/index.js"],"names":["variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextField","React","props","ref","autoComplete","_props$autoFocus","autoFocus","children","classes","className","_props$color","color","defaultValue","_props$disabled","disabled","_props$error","error","FormHelperTextProps","_props$fullWidth","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","_props$multiline","multiline","name","onBlur","onChange","onFocus","placeholder","_props$required","required","rows","rowsMax","_props$select","select","SelectProps","type","value","_props$variant","variant","other","_objectWithoutProperties","InputMore","shrink","notched","native","undefined","helperTextId","concat","inputLabelId","InputComponent","InputElement","_extends","FormControl","clsx","root","InputLabel","htmlFor","Select","labelId","input","FormHelperText","withStyles","callTimeFormatter","row","original","date","Date","call_date","call_time","dateformat","callLogs","logs","split","map","log","index","moment","format","MissedCallsTable","Component","render","callDetails","this","data","filterable","minRows","NoDataComponent","defaultFilterMethod","filter","String","toLocaleLowerCase","includes","columns","Header","width","Cell","accessor","maxWidth","minWidth","defaultProps","TotalCalls","state","callType","tabs","fields","startDate","endDate","errors","getCallDetails","getAllCallDetails","userDetails","contact","getCalls","setState","getTabs","tab","onClick","getActiveTabName","activeTab","length","handleChange","event","fieldName","target","fieldValue","onSubmit","preventDefault","noCalls","loadingComponent","componentDidMount","loading","title","today","getTodayDate","PageHeader","header","count","max","endDtae","Button","Array","isArray","TableMissCalls","TableTotalCalls","connect","ownProps","calls","dispatch","bindActionCreators","resetCalls"],"mappings":"qGAAA,8GAcIA,EAAmB,CACrBC,SAAUC,IACVC,OAAQC,IACRC,SAAUC,KAuCRC,EAAYC,cAAiB,SAAmBC,EAAOC,GACzD,IAAIC,EAAeF,EAAME,aACrBC,EAAmBH,EAAMI,UACzBA,OAAiC,IAArBD,GAAsCA,EAClDE,EAAWL,EAAMK,SACjBC,EAAUN,EAAMM,QAChBC,EAAYP,EAAMO,UAClBC,EAAeR,EAAMS,MACrBA,OAAyB,IAAjBD,EAA0B,UAAYA,EAC9CE,EAAeV,EAAMU,aACrBC,EAAkBX,EAAMY,SACxBA,OAA+B,IAApBD,GAAqCA,EAChDE,EAAeb,EAAMc,MACrBA,OAAyB,IAAjBD,GAAkCA,EAC1CE,EAAsBf,EAAMe,oBAC5BC,EAAmBhB,EAAMiB,UACzBA,OAAiC,IAArBD,GAAsCA,EAClDE,EAAalB,EAAMkB,WACnBC,EAAcnB,EAAMmB,YACpBC,EAAKpB,EAAMoB,GACXC,EAAkBrB,EAAMqB,gBACxBC,EAAatB,EAAMsB,WACnBC,EAAavB,EAAMuB,WACnBC,EAAWxB,EAAMwB,SACjBC,EAAQzB,EAAMyB,MACdC,EAAmB1B,EAAM2B,UACzBA,OAAiC,IAArBD,GAAsCA,EAClDE,EAAO5B,EAAM4B,KACbC,EAAS7B,EAAM6B,OACfC,EAAW9B,EAAM8B,SACjBC,EAAU/B,EAAM+B,QAChBC,EAAchC,EAAMgC,YACpBC,EAAkBjC,EAAMkC,SACxBA,OAA+B,IAApBD,GAAqCA,EAChDE,EAAOnC,EAAMmC,KACbC,EAAUpC,EAAMoC,QAChBC,EAAgBrC,EAAMsC,OACtBA,OAA2B,IAAlBD,GAAmCA,EAC5CE,EAAcvC,EAAMuC,YACpBC,EAAOxC,EAAMwC,KACbC,EAAQzC,EAAMyC,MACdC,EAAiB1C,EAAM2C,QACvBA,OAA6B,IAAnBD,EAA4B,WAAaA,EACnDE,EAAQC,YAAyB7C,EAAO,CAAC,eAAgB,YAAa,WAAY,UAAW,YAAa,QAAS,eAAgB,WAAY,QAAS,sBAAuB,YAAa,aAAc,cAAe,KAAM,kBAAmB,aAAc,aAAc,WAAY,QAAS,YAAa,OAAQ,SAAU,WAAY,UAAW,cAAe,WAAY,OAAQ,UAAW,SAAU,cAAe,OAAQ,QAAS,YAQrb,IAAI8C,GAAY,GAEA,aAAZH,IACEtB,GAAqD,qBAA3BA,EAAgB0B,SAC5CD,GAAUE,QAAU3B,EAAgB0B,QAGtCD,GAAUrB,MAAQA,EAAQ1B,gBAAoBA,WAAgB,KAAM0B,EAAOS,GAAY,SAAWT,GAGhGa,IAEGC,GAAgBA,EAAYU,SAC/BH,GAAU1B,QAAK8B,GAGjBJ,GAAU,yBAAsBI,GAGlC,IAAIC,GAAejC,GAAcE,EAAK,GAAGgC,OAAOhC,EAAI,qBAAkB8B,EAClEG,GAAe5B,GAASL,EAAK,GAAGgC,OAAOhC,EAAI,eAAY8B,EACvDI,GAAiB/D,EAAiBoD,GAClCY,GAAexD,gBAAoBuD,GAAgBE,YAAS,CAC9D,mBAAoBL,GACpBjD,aAAcA,EACdE,UAAWA,EACXM,aAAcA,EACdO,UAAWA,EACXU,UAAWA,EACXC,KAAMA,EACNO,KAAMA,EACNC,QAASA,EACTI,KAAMA,EACNC,MAAOA,EACPrB,GAAIA,EACJI,SAAUA,EACVK,OAAQA,EACRC,SAAUA,EACVC,QAASA,EACTC,YAAaA,EACbV,WAAYA,GACXwB,GAAWvB,IACd,OAAOxB,gBAAoB0D,IAAaD,YAAS,CAC/CjD,UAAWmD,YAAKpD,EAAQqD,KAAMpD,GAC9BK,SAAUA,EACVE,MAAOA,EACPG,UAAWA,EACXE,YAAaA,EACblB,IAAKA,EACLiC,SAAUA,EACVzB,MAAOA,EACPkC,QAASA,GACRC,GAAQnB,GAAS1B,gBAAoB6D,IAAYJ,YAAS,CAC3DK,QAASzC,EACTA,GAAIiC,IACHhC,GAAkBI,GAAQa,EAASvC,gBAAoB+D,IAAQN,YAAS,CACzE,mBAAoBL,GACpB/B,GAAIA,EACJ2C,QAASV,GACTZ,MAAOA,EACPuB,MAAOT,IACNhB,GAAclC,GAAYkD,GAAcrC,GAAcnB,gBAAoBkE,IAAgBT,YAAS,CACpGpC,GAAI+B,IACHpC,GAAsBG,OA6LZgD,gBApVK,CAElBP,KAAM,IAkV0B,CAChC/B,KAAM,gBADOsC,CAEZpE,I,iNCxVH,SAASqE,EAAkBnE,GACvB,IAAIoE,EAAMpE,EAAMqE,SAChB,MAAMC,EAAO,IAAIC,KAAKH,EAAII,UAAY,IAAMJ,EAAIK,WAChD,OAAO,6BAAMC,IAAWJ,EAAM,yBAGlC,SAASK,EAAS3E,GACd,IAAIoE,EAAMpE,EAAMqE,SACZO,EAAOR,EAAG,oBAA0BA,EAAG,mBAAuBS,MAAM,KAAKC,IAAI,CAACC,EAAKC,IAAU,yBAAKzE,UAAU,wBAAwB0E,IAAOF,EAAK,YAAYG,OAAO,eACvK,OAAO,yBAAK3E,UAAU,oBAAoBqE,GAG9C,MAAMO,UAAyBpF,IAAMqF,UACjCC,SAAU,MACEC,EAAgBC,KAAKvF,MAArBsF,YACR,OACI,yBAAK/E,UAAU,0BACX,kBAAC,IAAD,CACIiF,KAAMF,EACNG,YAAU,EACVC,QAAS,EACTC,gBAAiB,IAAM,KACvBC,oBAAqB,CAACC,EAAQzB,IAC1B0B,OAAO1B,EAAIyB,EAAOzE,KAAK2E,oBAAoBC,SAASH,EAAOpD,MAAMsD,qBACrEE,QAAS,CAAC,CACNC,OAAQ,OACR9E,GAAI,MACJ+E,MAAO,GACPV,YAAY,EACZW,KAAOhC,GAAQ,6BAAMA,EAAIY,MAAQ,IAClC,CACCkB,OAAQ,kBACRG,SAAU,iBACVC,SAAU,KACX,CACCJ,OAAQ,sBACRG,SAAU,YACVE,SAAU,IACVH,KAAMjC,GACP,CACC+B,OAAQ,mBACRG,SAAU,qBACVE,SAAU,IACVH,KAAMzB,GACP,CACCuB,OAAQ,eACRG,SAAU,eACVC,SAAU,KAyBX,CACCJ,OAAQ,wBACRG,SAAU,iBACVE,SAAU,IACVH,KAAOpG,GAAUiF,IAAOjF,EAAMyC,MAAO,YAAYyC,OAAO,mBAQhFC,EAAiBqB,aAAe,GAOjBrB,Q,mDChGf,MAAMsB,UAAmB1G,IAAMqF,UAAW,eAAD,oBACrCsB,MAAQ,CACJC,SAAU,GACVC,KAAM,CAAC,CACHnF,MAAO,eACPkF,SAAU,UACX,CACClF,MAAO,iBACPkF,SAAU,YACX,CACClF,MAAO,iBACPkF,SAAU,YAEdE,OAAQ,CACJC,UAAW,GACXC,QAAS,IAEbC,OAAQ,CACJF,UAAW,GACXC,QAAS,KAnBoB,KAuBrCE,eAAiB,KAEb1B,KAAKvF,MAAMkH,kBAAkB3B,KAAKmB,MAAMC,SAAUpB,KAAKvF,MAAMmH,YAAYC,QAAS7B,KAAKmB,MAAMG,OAAOC,UAAWvB,KAAKmB,MAAMG,OAAOE,UAzBhG,KAgCrCM,SAAYV,IAERpB,KAAKmB,MAAMC,WAAaA,GAAYpB,KAAK+B,SAAS,CAAEX,YAAY,IAAMpB,KAAK0B,mBAlC1C,KAqCrCM,QAAU,IACN,yBAAKhH,UAAU,kBACVgF,KAAKmB,MAAME,KAAK9B,IAAI,CAAC0C,EAAKxC,IACvB,yBACIzE,UAAWiH,EAAIb,WAAapB,KAAKmB,MAAMC,SAAW,qBAAuB,cACzEc,QAAS,IAAMlC,KAAK8B,SAASG,EAAIb,WAEhCa,EAAI/F,SA5CgB,KAgDrCiG,iBAAmB,KACf,IAAIC,EAAYpC,KAAKmB,MAAME,KAAKf,OAAO2B,GAAOA,EAAIb,WAAapB,KAAKmB,MAAMC,UAC1E,OAA4B,IAArBgB,EAAUC,QAAgBD,EAAU,GAAGlG,OAlDb,KAqDrCoG,aAAgBC,IACZ,IAAIC,EAAYD,EAAME,OAAOpG,KACzBqG,EAAaH,EAAME,OAAOvF,MAFR,EAGG8C,KAAKmB,MAAxBG,EAHgB,EAGhBA,OAAQG,EAHQ,EAGRA,OAEdH,EAAOkB,GAAaE,EACpB1C,KAAK+B,SAAS,CAAET,SAAQG,YA3DS,KA6DrCkB,SAAYJ,IACRA,EAAMK,iBACN5C,KAAK0B,kBA/D4B,KAkErCmB,QAAU,IAAM,yBAAK7H,UAAU,YAAf,mDAlEqB,KAoErC8H,iBAAmB,IAAM,yBAAK9H,UAAU,YAAf,2BAxCzB+H,oBACI/C,KAAK+B,SAAS,CAAEX,SAAU,UAAY,IAAMpB,KAAK0B,kBAyCrD5B,SAAU,IAAD,EAC0BE,KAAKvF,MAA9BsF,EADD,EACCA,YAAaiD,EADd,EACcA,QACfC,EAAK,4BAAwBjD,KAAKmC,oBAClCe,EAAQC,cACN1B,EAAWzB,KAAKmB,MAAhBM,OAEN,OACI,yBAAKzG,UAAU,wBACX,kBAACoI,EAAA,EAAD,CACIC,OAAQJ,EACRK,MAAOvD,GAAeA,EAAYsC,SAEtC,0BAAMrH,UAAU,eACZ,yBAAKA,UAAU,oBAAf,iBAYA,kBAACkD,EAAA,EAAD,CAAalD,UAAU,wDAAwDO,MAAOkG,EAAOF,WACzF,kBAAChH,EAAA,EAAD,CACIsB,GAAG,YACHQ,KAAK,YACLH,MAAM,aACNe,KAAK,OACLV,SAAUyD,KAAKsC,aACfvG,WAAY,CAAEwH,IAAKL,GACnBpH,gBAAiB,CACb0B,QAAQ,GAEZN,MAAO8C,KAAKmB,MAAMG,OAAOC,YAE7B,kBAAC7C,EAAA,EAAD,CAAgB7C,GAAG,aAAa4F,EAAOF,YAc3C,kBAACrD,EAAA,EAAD,CAAalD,UAAU,wDAAwDO,MAAOkG,EAAO+B,SACzF,kBAACjJ,EAAA,EAAD,CACIsB,GAAG,UACHQ,KAAK,UACLH,MAAM,WACNe,KAAK,OACLV,SAAUyD,KAAKsC,aACfvG,WAAY,CAAEwH,IAAKL,GACnBpH,gBAAiB,CACb0B,QAAQ,GAEZN,MAAO8C,KAAKmB,MAAMG,OAAOkC,UAE7B,kBAAC9E,EAAA,EAAD,CAAgB7C,GAAG,WAAW4F,EAAO+B,UAGzC,kBAACC,EAAA,EAAD,CACIvH,MAAO,SACPe,KAAK,SACLiF,QAASlC,KAAK2C,YAIrB3C,KAAKgC,UACL0B,MAAMC,QAAQ5D,IAAgBA,EAAYsC,OAAS,EACxB,WAAxBrC,KAAKmB,MAAMC,SACP,kBAACwC,EAAD,CAAgB7D,YAAaA,IAC3B,kBAAC8D,EAAA,EAAD,CAAiB9D,YAAaA,EAAaqC,UAAWpC,KAAKmB,MAAMC,WACrE4B,EACEhD,KAAK8C,oBACFE,GAAWhD,KAAK6C,YAkB5BiB,sBAZS,CAAC3C,EAAO4C,KACrB,CACHnC,YAAaT,EAAMS,YACnB7B,YAAaoB,EAAMpB,YAAYiE,MAC/BhB,QAAS7B,EAAMpB,YAAYiD,UAIPiB,GACjBC,YAAmB,CAAEvC,sBAAmBwC,gBAAcF,GAGlDH,CAA6C5C","file":"static/js/34.9596904c.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    InputMore.label = label ? React.createElement(React.Fragment, null, label, required && \"\\xA0*\") : label;\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport './style.scss';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport moment from 'moment';\r\n\r\n// function audioPathFormatter(props) {\r\n//     /* return <audio controls>\r\n//         <source src={props.value} type=\"audio/ogg\" />\r\n//         Your browser does not support the audio element.\r\n//     </audio>\r\n//     */\r\n//     return <div>{props.value}</div>\r\n// }\r\n\r\nfunction callTimeFormatter(props) {\r\n    let row = props.original;\r\n    const date = new Date(row.call_date + ' ' + row.call_time)\r\n    return <div>{dateformat(date, \"dS mmm, yyyy h:MM TT\")}</div>\r\n}\r\n\r\nfunction callLogs(props) {\r\n    let row = props.original;\r\n    let logs = row[\"call_timestamp_log\"] && row[\"call_timestamp_log\"].split(\"|\").map((log, index) => <div className=\"custom-badge pointer\">{moment(log, \"HH:mm:ss\").format(\"h:mm:ss A\")}</div>);\r\n    return <div className=\"missed-call-logs\">{logs}</div>\r\n}\r\n\r\nclass MissedCallsTable extends React.Component {\r\n    render() {\r\n        const { callDetails } = this.props;\r\n        return (\r\n            <div className=\"missed-calls-container\">\r\n                <ReactTable\r\n                    data={callDetails}\r\n                    filterable\r\n                    minRows={0}\r\n                    NoDataComponent={() => null}\r\n                    defaultFilterMethod={(filter, row) =>\r\n                        String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                    columns={[{\r\n                        Header: 'S.No',\r\n                        id: 'row',\r\n                        width: 50,\r\n                        filterable: false,\r\n                        Cell: (row) => <div>{row.index + 1}</div>\r\n                    }, {\r\n                        Header: 'Customer Number',\r\n                        accessor: 'customer_phone',\r\n                        maxWidth: 150\r\n                    }, {\r\n                        Header: 'Missed Call Details',\r\n                        accessor: 'call_time',\r\n                        minWidth: 200,\r\n                        Cell: callTimeFormatter\r\n                    }, {\r\n                        Header: 'Missed Call Logs',\r\n                        accessor: 'call_timestamp_log',\r\n                        minWidth: 300,\r\n                        Cell: callLogs\r\n                    }, {\r\n                        Header: 'Call Attemts',\r\n                        accessor: 'missed_times',\r\n                        maxWidth: 100\r\n                        // }, {\r\n                        //     Header: 'Order Details',\r\n                        //     maxWidth: 150,\r\n                        //     // accessor: '',\r\n                        //     filterMethod: (filter, row) =>\r\n                        //         String(row[filter.id]).toLowerCase().includes(filter.value.toLowerCase()),\r\n                        // }, {\r\n                        //     Header: 'Cart Details',\r\n                        //     maxWidth: 150,\r\n                        //     // accessor: '',\r\n                        //     filterMethod: (filter, row) =>\r\n                        //         String(row[filter.id]).toLowerCase().includes(filter.value.toLowerCase()),\r\n                        // }, {\r\n                        //     Header: 'Customer Details',\r\n                        //     maxWidth: 150,\r\n                        //     accessor: 'call_duration',\r\n                        //     filterMethod: (filter, row) =>\r\n                        //         String(row[filter.id]).toLowerCase().includes(filter.value.toLowerCase()),\r\n                        // }, {\r\n                        //     Header: 'Order Place On',\r\n                        //     maxWidth: 130,\r\n                        //     // accessor: '',\r\n                        //     filterMethod: (filter, row) =>\r\n                        //         String(row[filter.id]).toLowerCase().includes(filter.value.toLowerCase()),\r\n                    }, {\r\n                        Header: 'Last Update Timestamp',\r\n                        accessor: 'last_call_time',\r\n                        minWidth: 150,\r\n                        Cell: (props) => moment(props.value, \"HH:mm:ss\").format(\"h:mm:ss A\")\r\n                    }]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMissedCallsTable.defaultProps = {\r\n}\r\n\r\nMissedCallsTable.propTypes = {\r\n    callDetails: PropTypes.array.isRequired\r\n}\r\n\r\nexport default MissedCallsTable;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport './style.scss';\r\nimport { getAllCallDetails, resetCalls } from './action';\r\nimport TableTotalCalls from './components/TableTotalCalls';\r\nimport TableMissCalls from './components/TableMissCalls';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Button from '../../components/Button';\r\nimport { getTodayDate } from '../../config/time';\r\nimport { FormControl, FormHelperText, TextField } from '@material-ui/core';\r\n\r\nclass TotalCalls extends React.Component {\r\n    state = {\r\n        callType: '',\r\n        tabs: [{\r\n            label: \"Missed Calls\",\r\n            callType: \"missed\"\r\n        }, {\r\n            label: \"Outgoing Calls\",\r\n            callType: \"outbound\",\r\n        }, {\r\n            label: \"Incoming Calls\",\r\n            callType: \"inbound\"\r\n        }],\r\n        fields: {\r\n            startDate: \"\",\r\n            endDate: \"\"\r\n        },\r\n        errors: {\r\n            startDate: \"\",\r\n            endDate: \"\"\r\n        }\r\n    }\r\n\r\n    getCallDetails = () => {\r\n        //  Get The Contact Number from Token (for Backend)\r\n        this.props.getAllCallDetails(this.state.callType, this.props.userDetails.contact, this.state.fields.startDate, this.state.fields.endDate)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ callType: 'missed' }, () => this.getCallDetails());\r\n    }\r\n\r\n    getCalls = (callType) => {\r\n        // this.props.resetCalls();\r\n        this.state.callType !== callType && this.setState({ callType }, () => this.getCallDetails());\r\n    }\r\n\r\n    getTabs = () =>\r\n        <div className=\"menu-container\">\r\n            {this.state.tabs.map((tab, index) =>\r\n                <div\r\n                    className={tab.callType === this.state.callType ? \"tab pointer active\" : \"tab pointer\"}\r\n                    onClick={() => this.getCalls(tab.callType)}\r\n                >\r\n                    {tab.label}\r\n                </div >)}\r\n        </div>\r\n\r\n    getActiveTabName = () => {\r\n        let activeTab = this.state.tabs.filter(tab => tab.callType === this.state.callType);\r\n        return activeTab.length !== 0 && activeTab[0].label;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let fieldName = event.target.name;\r\n        let fieldValue = event.target.value;\r\n        let { fields, errors } = this.state;\r\n\r\n        fields[fieldName] = fieldValue;\r\n        this.setState({ fields, errors })\r\n    }\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.getCallDetails()\r\n    }\r\n\r\n    noCalls = () => <div className=\"no-calls\">No Cloud Telephony Calls Assigned to you yet...</div>\r\n\r\n    loadingComponent = () => <div className=\"no-calls\">Getting Call details...</div>\r\n\r\n    render() {\r\n        let { callDetails, loading } = this.props;\r\n        let title = `Cloud Telephony - ${this.getActiveTabName()}`;\r\n        let today = getTodayDate();\r\n        let { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"totalcalls-container\">\r\n                <PageHeader\r\n                    header={title}\r\n                    count={callDetails && callDetails.length}\r\n                />\r\n                <form className=\"date-filter\">\r\n                    <div className=\"date-filter-text\">Date Filter :</div>\r\n                    {/* <div className=\"input-container\">\r\n                        <div className=\"input-label\">Start Date</div>\r\n                        <input\r\n                            name=\"startDate\"\r\n                            className=\"input-field\"\r\n                            type=\"date\"\r\n                            max={today}\r\n                            onChange={this.handleChange}\r\n                            value={this.state.fields.startDate}\r\n                        />\r\n                    </div> */}\r\n                    <FormControl className=\"full-width form-control-custom custom-width width-150\" error={errors.startDate}>\r\n                        <TextField\r\n                            id=\"startDate\"\r\n                            name=\"startDate\"\r\n                            label=\"Start Date\"\r\n                            type=\"date\"\r\n                            onChange={this.handleChange}\r\n                            inputProps={{ max: today }}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            value={this.state.fields.startDate}\r\n                        />\r\n                        <FormHelperText id=\"startDate\">{errors.startDate}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    {/* <div className=\"input-container\">\r\n                        <div className=\"input-label\">End Date</div>\r\n                        <input\r\n                            name=\"endDate\"\r\n                            className=\"input-field\"\r\n                            type=\"date\"\r\n                            max={today}\r\n                            onChange={this.handleChange}\r\n                            value={this.state.fields.endDtae}\r\n                        />\r\n                    </div> */}\r\n                    <FormControl className=\"full-width form-control-custom custom-width width-150\" error={errors.endDtae}>\r\n                        <TextField\r\n                            id=\"endDtae\"\r\n                            name=\"endDtae\"\r\n                            label=\"End Date\"\r\n                            type=\"date\"\r\n                            onChange={this.handleChange}\r\n                            inputProps={{ max: today }}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            value={this.state.fields.endDtae}\r\n                        />\r\n                        <FormHelperText id=\"endDtae\">{errors.endDtae}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Button\r\n                        label={\"Submit\"}\r\n                        type=\"submit\"\r\n                        onClick={this.onSubmit}\r\n                    />\r\n                </form>\r\n\r\n                {this.getTabs()}\r\n                {Array.isArray(callDetails) && callDetails.length > 0 ?\r\n                    this.state.callType === 'missed' ?\r\n                        <TableMissCalls callDetails={callDetails} />\r\n                        : <TableTotalCalls callDetails={callDetails} activeTab={this.state.callType} />\r\n                    : loading ?\r\n                        this.loadingComponent()\r\n                        : !loading && this.noCalls()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        userDetails: state.userDetails,\r\n        callDetails: state.callDetails.calls,\r\n        loading: state.callDetails.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ getAllCallDetails, resetCalls }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TotalCalls);\r\n"],"sourceRoot":""}