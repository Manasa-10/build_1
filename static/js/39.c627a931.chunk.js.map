{"version":3,"sources":["../node_modules/@material-ui/core/esm/TextField/TextField.js","containers/UniversalCallSearch/action.js","containers/UniversalCallSearch/index.js"],"names":["variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextField","React","props","ref","autoComplete","_props$autoFocus","autoFocus","children","classes","className","_props$color","color","defaultValue","_props$disabled","disabled","_props$error","error","FormHelperTextProps","_props$fullWidth","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","_props$multiline","multiline","name","onBlur","onChange","onFocus","placeholder","_props$required","required","rows","rowsMax","_props$select","select","SelectProps","type","value","_props$variant","variant","other","_objectWithoutProperties","InputMore","shrink","notched","native","undefined","helperTextId","concat","inputLabelId","InputComponent","InputElement","_extends","FormControl","clsx","root","InputLabel","htmlFor","Select","labelId","input","FormHelperText","withStyles","getCallsDetailsAction","data","dispatch","showLoader","getCallDetails","then","response","hideLoader","status","GET_CALLS_SUCCESS","getCallsDetailsSuccess","toast","info","catch","handleError","resetgetCallsDetails","RESET_CALLS","UniversalCallSearch","Component","state","fields","callType","agentNumber","customerNumber","startDate","endDate","errors","handleChange","event","fieldName","target","filedValue","this","numberRegex","test","length","setState","search","preventDefault","console","log","payload","agent_contact","cus_contact","start","end","missed","getMinDate","componentWillUnmount","render","PageHeader","header","aria-describedby","checked","max","getTodayDate","Button","onClick","Array","isArray","callDetails","TableTotalCalls","connect","ownProps","universalCallSearch","calls","bindActionCreators"],"mappings":"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","file":"static/js/39.c627a931.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    InputMore.label = label ? React.createElement(React.Fragment, null, label, required && \"\\xA0*\") : label;\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);","import { GET_CALLS_SUCCESS, RESET_CALLS } from \"./constants\";\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\nimport handleError from \"../../errorHandler\";\r\nimport { getCallDetails } from \"../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nexport function getCallsDetailsAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        getCallDetails(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                if (response.status === 200) {\r\n                    dispatch(getCallsDetailsSuccess(response.data));\r\n                } else if (response.status === 204) {\r\n                    toast.info(\"No Data Available\")\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getCallsDetailsSuccess(data) {\r\n    return {\r\n        type: GET_CALLS_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function resetgetCallsDetails() {\r\n    return {\r\n        type: RESET_CALLS\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport { getCallsDetailsAction, resetgetCallsDetails } from './action';\r\nimport { FormControl, InputLabel, Input, FormHelperText, TextField } from '@material-ui/core';\r\nimport Button from '../../components/Button';\r\nimport { numberRegex } from '../../config/regex';\r\nimport TableTotalCalls from '../TotalCalls/components/TableTotalCalls';\r\nimport { getTodayDate } from '../../config/time';\r\n\r\nclass UniversalCallSearch extends Component {\r\n\r\n    state = {\r\n        fields: {\r\n            callType: \"outbound\",\r\n            agentNumber: \"\",\r\n            customerNumber: \"\",\r\n            startDate: \"\",\r\n            endDate: \"\"\r\n        },\r\n        errors: {\r\n            callType: \"\",\r\n            agentNumber: \"\",\r\n            customerNumber: \"\",\r\n            startDate: \"\",\r\n            endDate: \"\"\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetgetCallsDetails();\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let fieldName = event.target.name;\r\n        let filedValue = event.target.value;\r\n        let { fields, errors } = this.state;\r\n\r\n        switch (fieldName) {\r\n\r\n            case \"agentNumber\":\r\n                if (filedValue && numberRegex.test(filedValue) && filedValue.length <= 10) {\r\n                    fields[fieldName] = filedValue;\r\n                    // } else if (filedValue && numberRegex.test(filedValue)) {\r\n                    //     fields[fieldName] = filedValue;\r\n                } else if (!filedValue) {\r\n                    fields[fieldName] = \"\";\r\n                    // errors[fieldName] = \"Agent Number is Required!\";\r\n                }\r\n                break;\r\n\r\n            case \"customerNumber\":\r\n                if (filedValue && numberRegex.test(filedValue) && filedValue.length <= 10) {\r\n                    fields[fieldName] = filedValue;\r\n                    // } else if (filedValue && numberRegex.test(filedValue)) {\r\n                    //     fields[fieldName] = filedValue;\r\n                } else if (!filedValue) {\r\n                    fields[fieldName] = \"\";\r\n                    // errors[fieldName] = \"Customer Number is Required!\";\r\n                }\r\n                break;\r\n\r\n            case \"callType\":\r\n                fields[fieldName] = filedValue;\r\n                break;\r\n\r\n            default: fields[fieldName] = filedValue;\r\n        }\r\n\r\n        this.setState({ fields, errors });\r\n    }\r\n\r\n    search = (event) => {\r\n        event.preventDefault();\r\n        let { fields } = this.state;\r\n        console.log(\"Searching...\");\r\n        let payload = {\r\n            agent_contact: fields.agentNumber ? (\"+91\" + fields.agentNumber) : \"\",\r\n            cus_contact: fields.customerNumber ? (\"+91\" + fields.customerNumber) : \"\",  //  fields.customerNumber,\r\n            // call_type: \"outbound\", //   fields.callType,    //  SHould be this.\r\n            start: fields.startDate,\r\n            end: fields.endDate,\r\n            missed: fields.callType === \"missed\" ? 1 : 0\r\n        };\r\n        (fields.agentNumber || fields.customerNumber) && this.props.getCallsDetailsAction(payload);\r\n    }\r\n\r\n    getMinDate = () => {\r\n        return '2019-11-30';\r\n    }\r\n\r\n    render() {\r\n        const title = \"Universal Call Search\";\r\n        let { fields, errors } = this.state;\r\n        return (\r\n            <div className=\"universal-call-container\">\r\n                <PageHeader\r\n                    header={title}\r\n                />\r\n                <form className=\"universal-call-form\">\r\n                    <FormControl className=\"full-width form-control-custom custom-width\" error={errors.agentNumber}>\r\n                        <InputLabel htmlFor=\"agentNumber\">Agent Number</InputLabel>\r\n                        <Input\r\n                            id=\"agentNumber\"\r\n                            name=\"agentNumber\"\r\n                            type=\"text\"\r\n                            value={fields.agentNumber}\r\n                            onChange={this.handleChange}\r\n                            aria-describedby=\"agentNumber\"\r\n                            fullWidth={true}\r\n                        />\r\n                        <FormHelperText id=\"agentNumber\">{errors.agentNumber}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <FormControl className=\"full-width form-control-custom custom-width\" error={errors.customerNumber}>\r\n                        <InputLabel htmlFor=\"customerNumber\">Customer Number</InputLabel>\r\n                        <Input\r\n                            id=\"customerNumber\"\r\n                            name=\"customerNumber\"\r\n                            type=\"text\"\r\n                            value={fields.customerNumber}\r\n                            onChange={this.handleChange}\r\n                            aria-describedby=\"customerNumber\"\r\n                            fullWidth={true}\r\n                        />\r\n                        <FormHelperText id=\"customerNumber\">{errors.customerNumber}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <div className=\"radio-btn missed-call\">\r\n                        <input\r\n                            id=\"missed-call\"\r\n                            name=\"callType\"\r\n                            type=\"checkbox\"\r\n                            onChange={this.handleChange}\r\n                            checked={fields.callType === \"missed\"}\r\n                            value={fields.callType === \"missed\" ? \"all\" : \"missed\"}\r\n                        />\r\n                        <label htmlFor=\"missed-call\">Missed Calls</label>\r\n                    </div>\r\n\r\n                    <FormControl className=\"full-width form-control-custom custom-width\" error={errors.startDate}>\r\n                        {/* <InputLabel htmlFor=\"startDate\">Start Date</InputLabel> */}\r\n                        <TextField\r\n                            id=\"startDate\"\r\n                            name=\"startDate\"\r\n                            label=\"Start Date\"\r\n                            type=\"date\"\r\n                            onChange={this.handleChange}\r\n                            inputProps={{ max: getTodayDate() }}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <FormHelperText id=\"startDate\">{errors.startDate}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <FormControl className=\"full-width form-control-custom custom-width\" error={errors.endDate}>\r\n                        {/* <InputLabel htmlFor=\"endDate\">End Date</InputLabel> */}\r\n                        <TextField\r\n                            id=\"endDate\"\r\n                            name=\"endDate\"\r\n                            label=\"End Date\"\r\n                            type=\"date\"\r\n                            onChange={this.handleChange}\r\n                            inputProps={{ max: getTodayDate() }}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <FormHelperText id=\"endDate\">{errors.endDate}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Button\r\n                        label={\"Search\"}\r\n                        type=\"submit\"\r\n                        onClick={this.search}\r\n                    />\r\n                </form>\r\n\r\n                {Array.isArray(this.props.callDetails) && this.props.callDetails.length > 0 &&\r\n                    <div className=\"react-table-container\">\r\n                        <div className=\"warning-note\"><b>Note:</b> If you don't select any date range, it will pull last 1 week records</div>\r\n                        <TableTotalCalls callDetails={this.props.callDetails} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        callDetails: state.universalCallSearch.calls\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ getCallsDetailsAction, resetgetCallsDetails }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UniversalCallSearch);\r\n"],"sourceRoot":""}