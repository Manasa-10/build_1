{"version":3,"sources":["utilities/fileHandler.js","containers/ImportLogisticSheet/action.js","containers/ImportLogisticSheet/components/Table/index.js","containers/ImportLogisticSheet/index.js"],"names":["convertBase64","file","callback","base64Converted","reader","FileReader","readAsDataURL","onloadend","fileData","result","split","length","FileListItem","a","c","b","slice","call","Array","isArray","arguments","d","File","TypeError","ClipboardEvent","clipboardData","DataTransfer","items","add","files","importLogisticAction","data","dispatch","showLoader","uploadLogisticSheet","then","response","hideLoader","type","UPLOAD_SHEET_SUCCSESS","uploadSuccess","catch","error","handleError","resetLogisticSheet","RESET_SHEET","resetData","RESET_SHEET_DATA","Table","Component","customCell","props","className","original","status","value","render","tableData","this","filterable","minRows","pageSize","PaginationComponent","NoDataComponent","defaultFilterMethod","filter","row","String","id","toLocaleLowerCase","includes","columns","Header","maxWidth","Cell","index","accessor","width","show","response_type","minWidth","ImportLogisticSheets","constructor","super","resetForm","setState","enableSubmit","fileInput","current","validateForm","state","validForm","every","field","handleChange","event","fieldName","target","name","fieldValue","uploadLogistic","payload","React","createRef","componentWillReceiveProps","reset","componentWillUnmount","userDetails","message","title","role","PageHeader","header","style","paddingRight","onChange","multiple","ref","accept","encType","Button","label","onClick","disabled","connect","ownProps","importLogistic","onUploadSuccess","bindActionCreators"],"mappings":"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","file":"static/js/32.f5098bcc.chunk.js","sourcesContent":["export const convertBase64 = (file, callback) => {\r\n    //  Return Base64 in callback\r\n    if (!file) return;\r\n    let base64Converted;\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onloadend = () => {\r\n        let fileData = reader.result.split(\",\");    //  Spilting and removing header part(that contains file type etc)\r\n        base64Converted = fileData.length > 0 ? fileData[1] : reader.result;\r\n\r\n        callback(base64Converted);\r\n    }\r\n    //  using of call back\r\n    //  (result) => {\r\n    //      console.log(result);\r\n    //  }\r\n}\r\n\r\nexport function FileListItem(a) {\r\n    //  For Reseting the event.target.files after API success.\r\n    a = [].slice.call(Array.isArray(a) ? a : arguments)\r\n    for (var c, b = c = a.length, d = !0; b-- && d;) d = a[b] instanceof File\r\n    if (!d) throw new TypeError(\"expected argument to FileList is File or array of File objects\")\r\n    for (b = (new ClipboardEvent(\"\")).clipboardData || new DataTransfer(); c--;) b.items.add(a[c])\r\n    return b.files\r\n\r\n\r\n    //  Do the following\r\n    //  this.fileInput = React.createRef();     ------->        Add it in Constructor\r\n    //  this.fileInput.current.files = FileListItem([]);    ->  Add it in reset() Method\r\n    //  ref={this.fileInput}                    ------->        Add it in Input Tag\r\n}\r\n\r\nexport const convetBase64ToImage = (base64String) => {\r\n    return \"data:image/jpeg;base64,\" + base64String;\r\n}\r\n","import { UPLOAD_SHEET_SUCCSESS, RESET_SHEET ,RESET_SHEET_DATA} from \"./constants\";\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\nimport handleError from \"../../errorHandler\";\r\nimport { uploadLogisticSheet } from \"../../api\";\r\n\r\n\r\nexport function importLogisticAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        uploadLogisticSheet(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(uploadSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function uploadSuccess(data) {\r\n    return {\r\n        type: UPLOAD_SHEET_SUCCSESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function resetLogisticSheet() {\r\n    return {\r\n        type: RESET_SHEET\r\n    }\r\n}\r\n\r\nexport function resetData() {\r\n    return {\r\n        type: RESET_SHEET_DATA\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport './style.scss';\r\n\r\n\r\nexport default class Table extends Component {\r\n\r\n    customCell = (props) => {\r\n        return <div className={props.original.status ? \"success-color break-word\" : \"error-color break-word\"}>{props.value}</div>\r\n    }\r\n\r\n    render() {\r\n        let { tableData } = this.props;\r\n        return (\r\n            <ReactTable\r\n                data={tableData.data}\r\n                filterable\r\n                minRows={0}\r\n                pageSize={9999}\r\n                // getTrProps={(state, rowInfo, column, instance) => {\r\n                //     return {\r\n                //         style: {\r\n                //             color: rowInfo.original && (rowInfo.original.status ? \"green !important\" : \"red !important\") \r\n                //         }\r\n                //     }\r\n                // }}\r\n                PaginationComponent={() => null}\r\n                NoDataComponent={() => null}\r\n                defaultFilterMethod={(filter, row) =>\r\n                    String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                columns={\r\n                    [{\r\n                        Header: 'S.No',\r\n                        id: 'row',\r\n                        maxWidth: 50,\r\n                        filterable: false,\r\n                        Cell: (row) => <div>{row.index + 1}</div>\r\n                    }, {\r\n                        Header: \"Invoice Number\",\r\n                        accessor: \"invoice_number\",\r\n                        width: 200,\r\n                        show: this.props.tableData &&\r\n                            this.props.tableData.response_type &&\r\n                            this.props.tableData.response_type.toLocaleLowerCase() === \"logistic\",\r\n                        Cell: this.customCell\r\n\r\n                    }, {\r\n                        Header: \"Customer Name\",\r\n                        accessor: \"customer_name\",\r\n                        width: 230,\r\n                        show: this.props.tableData &&\r\n                            this.props.tableData.response_type &&\r\n                            this.props.tableData.response_type.toLocaleLowerCase() === \"logistic\",\r\n                        Cell: this.customCell\r\n                    }, {\r\n                        Header: \"Mobile Number\",\r\n                        accessor: \"mobile_number\",\r\n                        width: 250,\r\n                        show: this.props.tableData &&\r\n                            this.props.tableData.response_type &&\r\n                            this.props.tableData.response_type.toLocaleLowerCase() === \"ivr\",\r\n                        Cell: this.customCell\r\n\r\n                    }, {\r\n                        Header: \"Result\",\r\n                        accessor: \"message\",\r\n                        minWidth: 320,\r\n                        Cell: this.customCell\r\n                    }]\r\n                }\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Button from '../../components/Button';\r\nimport { importLogisticAction, resetLogisticSheet, resetData } from './action';\r\nimport { FileListItem, convertBase64 } from '../../utilities/fileHandler';\r\nimport LogisticTable from './components/Table';\r\n\r\n\r\nclass ImportLogisticSheets extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                \"attachments\": \"\"\r\n            },\r\n            enableSubmit: false\r\n        }\r\n        this.fileInput = React.createRef();\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.reset) {\r\n            this.resetForm();\r\n            this.props.resetData();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.resetLogisticSheet();\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            data: {\r\n                \"attachments\": \"\"\r\n            },\r\n            enableSubmit: false\r\n        });\r\n        this.fileInput.current.files = FileListItem([]);\r\n    }\r\n\r\n    validateForm = () => {\r\n        let { data } = this.state;\r\n        let validForm = false;\r\n        let requiredFields = [\"attachments\"];\r\n        validForm = requiredFields.every(field => data[field] !== \"\");\r\n        this.setState({ enableSubmit: validForm });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let fieldName = event.target.name;\r\n        let fieldValue = event.target.value;\r\n        let { data } = this.state;\r\n\r\n        if (fieldName === \"attachments\") {\r\n            let { files } = event.target;\r\n            if (files.length > 0) {\r\n                let file = this.fileInput.current.files[0]\r\n                convertBase64(file, (result) => {\r\n                    data[\"attachments\"] = result;\r\n                    this.setState({ data }, () => {\r\n                        this.validateForm();\r\n                    });\r\n                });\r\n            }\r\n        } else {\r\n            switch (fieldName) {\r\n                default:\r\n                    data[fieldName] = fieldValue;\r\n                    break;\r\n            }\r\n        }\r\n        this.setState({ data }, () => {\r\n            this.validateForm();\r\n        });\r\n    }\r\n\r\n    uploadLogistic = () => {\r\n        let { data } = this.state;\r\n        let payload = {\r\n            ...data\r\n        };\r\n        this.props.importLogisticAction(payload);\r\n    }\r\n\r\n    render() {\r\n        let { result, userDetails } = this.props;\r\n        let response = result && result.message;\r\n        let title = `${userDetails.role.includes(\"TEAML\") ? \"Import IVR Sheet\" : \"Logistics Sheet\"}`\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"logistic-container\">\r\n                    <PageHeader\r\n                        header={title}\r\n                    />\r\n                    <div className=\"field-container\">\r\n                        <b style={{ paddingRight: \"15px\" }}>Upload Sheet</b>\r\n                        <input\r\n                            name=\"attachments\"\r\n                            className=\"attachment\"\r\n                            type=\"file\"\r\n                            onChange={this.handleChange}\r\n                            multiple={true}\r\n                            // value={data.attachments}\r\n                            ref={this.fileInput}\r\n                            accept=\".xlsx, .xls, .csv\"\r\n                            encType=\"multipart/form-data\"\r\n                        />\r\n                        <Button\r\n                            label={\"Import Sheet\"}\r\n                            className=\"flex-container\"\r\n                            onClick={this.uploadLogistic}\r\n                            disabled={!this.state.enableSubmit}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"table-container\">\r\n                    {response && response.data && Array.isArray(response.data) && response.data.length > 0 &&\r\n                        <LogisticTable\r\n                            tableData={response}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        userDetails: state.userDetails,\r\n        result: state.importLogistic.result,\r\n        reset: state.importLogistic.onUploadSuccess\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        importLogisticAction,\r\n        resetLogisticSheet,\r\n        resetData\r\n    }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImportLogisticSheets);\r\n"],"sourceRoot":""}