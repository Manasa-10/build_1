{"version":3,"sources":["../node_modules/@material-ui/core/esm/TextField/TextField.js","containers/Reports/action.js","containers/Reports/components/OcReportTable/index.js","containers/Reports/components/RTReportTable/index.js","containers/Reports/components/QueryReportTable/index.js","containers/Reports/components/SalesReportTable/index.js","containers/Reports/components/Table/index.js","containers/Reports/index.js"],"names":["variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextField","React","props","ref","autoComplete","_props$autoFocus","autoFocus","children","classes","className","_props$color","color","defaultValue","_props$disabled","disabled","_props$error","error","FormHelperTextProps","_props$fullWidth","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","_props$multiline","multiline","name","onBlur","onChange","onFocus","placeholder","_props$required","required","rows","rowsMax","_props$select","select","SelectProps","type","value","_props$variant","variant","other","_objectWithoutProperties","InputMore","shrink","notched","native","undefined","helperTextId","concat","inputLabelId","InputComponent","InputElement","_extends","FormControl","clsx","root","InputLabel","htmlFor","Select","labelId","input","FormHelperText","withStyles","getReportAction","data","dispatch","showLoader","getReports","then","response","hideLoader","GET_REPORTS_SUCCESS","getReportsSuccess","catch","handleError","resetReportsDetails","RESET_REPORTS","ReportsTable","Component","inboundFormatter","rowInfo","original","total_inbound_call","inbound_call_connected","outboundCallFormatter","total_outbound_call","connected_outbound_call","connected_outbound_10sec","missedCallFormatter","total_missed_call","missed_calls_handled","total_times_of_missed_call","total_times_missed_office","ringing_no_response","total_time_ringing","activityFormatter","total_working_time","total_break_time","login_time","logout_time","timing_log","render","this","columnDefaults","ReactTableDefaults","column","headerClassName","tdClassName","Cell","filterable","minRows","pageSize","PaginationComponent","NoDataComponent","defaultFilterMethod","filter","row","String","toLocaleLowerCase","includes","columns","Header","maxWidth","index","accessor","minWidth","style","outboundFormatter","outbound_connected","connected_gret_10sec","missed_call_in_office_hours","missed_call_beyond_office_hours","connected_inbound_calls","total_outbound","total_outbound_connected","followUpDetails","followup_date","followup_comments","repeatCallLog","sales_repeat_log","ClassName","ReportTable","team","OcReportTable","RTReportTable","QueryReportTable","SalesReportTable","UniversalCallSearch","state","fields","start_date","end_date","errors","handleChange","event","fieldName","target","filedValue","numberRegex","test","length","setState","console","log","search","preventDefault","componentWillMount","getTodayDate","componentWillUnmount","reportDetails","startDate","endDate","Button","onClick","Array","isArray","connect","ownProps","reports","bindActionCreators"],"mappings":"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","file":"static/js/38.c788760f.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    InputMore.label = label ? React.createElement(React.Fragment, null, label, required && \"\\xA0*\") : label;\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);","import { GET_REPORTS_SUCCESS, RESET_REPORTS } from \"./constants\";\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\nimport handleError from \"../../errorHandler\";\r\nimport { getReports } from \"../../api\";\r\n\r\nexport function getReportAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        getReports(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(getReportsSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getReportsSuccess(data) {\r\n    return {\r\n        type: GET_REPORTS_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function resetReportsDetails() {\r\n    return {\r\n        type: RESET_REPORTS\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactTable, { ReactTableDefaults } from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n\r\nclass ReportsTable extends React.Component {\r\n\r\n    inboundFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Calls : </b>{rowInfo.total_inbound_call}</div>\r\n            <div><b>Connected Calls : </b>{rowInfo.inbound_call_connected || 0}</div>\r\n        </div>\r\n    }\r\n\r\n    outboundCallFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Calls :</b> {rowInfo.total_outbound_call}</div>\r\n            <div><b>Connected Calls :</b> {rowInfo.connected_outbound_call}</div>\r\n            <div><b>Connected >10sec :</b> {rowInfo.connected_outbound_10sec}</div>\r\n        </div>\r\n    }\r\n\r\n    missedCallFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Calls :</b> {rowInfo.total_missed_call}</div>\r\n            <div><b>Connected Calls :</b> {rowInfo.missed_calls_handled}</div>\r\n            <div><b>Total Times of Missed call:</b> {rowInfo.total_times_of_missed_call}</div>\r\n            <div><b>In Office Hours:</b> {rowInfo.total_times_missed_office}</div>\r\n            <div><b>Ringing, no response:</b> {rowInfo.ringing_no_response}</div>\r\n            <div><b>Total Time Ringing:</b> {rowInfo.total_time_ringing}</div>\r\n        </div>\r\n    }\r\n\r\n    activityFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word activity-formatter\">\r\n            <div><b>working Time :</b> {rowInfo.total_working_time}</div>\r\n            <div><b>Break Time :</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Login Time:</b> {rowInfo.login_time}</div>\r\n            <div><b>Logout Time:</b> {rowInfo.logout_time}</div>\r\n            <div><b>Break Timing Log:</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Timing Log:</b> {rowInfo.timing_log}</div>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        let { data } = this.props;\r\n        const columnDefaults = { ...ReactTableDefaults.column, headerClassName: 'wordwrap', tdClassName: 'wordwrap', Cell: 0 }\r\n        return (\r\n            <div className=\"reports-table-container\">\r\n                <ReactTable\r\n                    data={data} // verify once API is ready\r\n                    filterable\r\n                    minRows={0}\r\n                    pageSize={999}\r\n                    // PaginationComponent={() =>\r\n                    //     <PaginationComponent\r\n                    //         dropDownValues={dropDownValues}\r\n                    //         onLimitChange={this.onLimitChange}\r\n                    //         offset={this.state.offset}\r\n                    //         total={this.state.total}\r\n                    //         limit={this.state.limit}\r\n                    //         onPrevClick={this.handleClick}\r\n                    //         onNextClick={this.handleClick}\r\n                    //     />\r\n                    // }\r\n                    PaginationComponent={() => null}\r\n                    NoDataComponent={() => null}\r\n                    defaultFilterMethod={(filter, row) =>\r\n                        String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                    column={columnDefaults}\r\n                    columns={[{\r\n                        Header: 'S.No',\r\n                        id: 'row',\r\n                        maxWidth: 50,\r\n                        filterable: false,\r\n                        Cell: (row) => <div>{row.index + 1}</div>\r\n                    }, {\r\n                        Header: \"CET Detail\",\r\n                        accessor: \"agent_name\",\r\n                        minWidth: 120,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Assigned Orders\",\r\n                        accessor: \"number_order_assigned_630\",\r\n                        minWidth: 80,\r\n                        style: { 'whiteSpace': 'unset' }\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Total CX Confirmed\",\r\n                        accessor: \"total_cx_confirmed\",\r\n                        minWidth: 80,\r\n                        // Cell: this.inboundFormatter\r\n                    }, {\r\n                        Header: \"Actionable Orders\",\r\n                        accessor: \"actionable_order\",\r\n                        minWidth: 80,\r\n                        // Cell: this.missedCallFormatter\r\n                    }, {\r\n                        Header: \"Outbound Call Details\",\r\n                        accessor: \"sample001\",\r\n                        minWidth: 180,\r\n                        Cell: this.outboundCallFormatter\r\n                    }, {\r\n                        Header: \"Inbound Call Details\",\r\n                        accessor: \"mapping_query\",\r\n                        minWidth: 180,\r\n                        Cell: this.inboundFormatter\r\n                    }, {\r\n                        Header: \"Missed Call Details\",\r\n                        accessor: \"first_call_average\",\r\n                        minWidth: 180,\r\n                        Cell: this.missedCallFormatter\r\n                    }, {\r\n                        Header: \"Wakefit Auto Confirmed\",\r\n                        accessor: \"first_call_median\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Affiliate Confirmed\",\r\n                        accessor: \"affiliate_auto_confirmed\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Affiliate Red Mark\",\r\n                        accessor: \"affiliate_order_red_mark\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Activities\",\r\n                        accessor: \"email\",\r\n                        minWidth: 200,\r\n                        Cell: this.activityFormatter\r\n                    }, {\r\n                        Header: \"Total Talked Time\",\r\n                        accessor: \"total_talk_time\",\r\n                        minWidth: 80,\r\n                    }]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReportsTable;\r\n","import React from 'react';\r\nimport ReactTable, { ReactTableDefaults } from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n\r\nclass ReportsTable extends React.Component {\r\n\r\n    outboundFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Calls : </b>{rowInfo.total_outbound_call}</div>\r\n            <div><b>Connected Calls : </b>{rowInfo.outbound_connected}</div>\r\n            <div><b>Connected >10sec : </b>{rowInfo.connected_gret_10sec}</div>\r\n        </div>\r\n    }\r\n\r\n    missedCallFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Missed calls Calls :</b> {rowInfo.total_missed_call}</div>\r\n            <div><b>Handled Calls :</b> {rowInfo.missed_calls_handled}</div>\r\n            <div><b>Total Times of Missed call:</b> {rowInfo.total_times_of_missed_call}</div>\r\n            <div><b>In Office Hours:</b> {rowInfo.missed_call_in_office_hours}</div>\r\n            <div><b>Beyond Office Hours:</b> {rowInfo.missed_call_beyond_office_hours}</div>\r\n        </div>\r\n    }\r\n\r\n    activityFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word activity-formatter\">\r\n            <div><b>working Time :</b> {rowInfo.total_working_time}</div>\r\n            <div><b>Break Time :</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Login Time:</b> {rowInfo.login_time}</div>\r\n            <div><b>Logout Time:</b> {rowInfo.logout_time}</div>\r\n            <div><b>Break Timing Log:</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Timing Log:</b> {rowInfo.timing_log}</div>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        let { data } = this.props;\r\n        const columnDefaults = { ...ReactTableDefaults.column, headerClassName: 'wordwrap', tdClassName: 'wordwrap', Cell: 0 }\r\n        return (\r\n            <div className=\"reports-table-container\">\r\n                <ReactTable\r\n                    data={data} // verify once API is ready\r\n                    filterable\r\n                    minRows={0}\r\n                    pageSize={999}\r\n                    // PaginationComponent={() =>\r\n                    //     <PaginationComponent\r\n                    //         dropDownValues={dropDownValues}\r\n                    //         onLimitChange={this.onLimitChange}\r\n                    //         offset={this.state.offset}\r\n                    //         total={this.state.total}\r\n                    //         limit={this.state.limit}\r\n                    //         onPrevClick={this.handleClick}\r\n                    //         onNextClick={this.handleClick}\r\n                    //     />\r\n                    // }\r\n                    PaginationComponent={() => null}\r\n                    NoDataComponent={() => null}\r\n                    defaultFilterMethod={(filter, row) =>\r\n                        String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                    column={columnDefaults}\r\n                    columns={[{\r\n                        Header: 'S.No',\r\n                        id: 'row',\r\n                        maxWidth: 50,\r\n                        filterable: false,\r\n                        Cell: (row) => <div>{row.index + 1}</div>\r\n                    }, {\r\n                        Header: \"CET Detail\",\r\n                        accessor: \"agent_name\",\r\n                        minWidth: 120,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Assigned Orders\",\r\n                        accessor: \"number_order_assigned\",\r\n                        minWidth: 80,\r\n                        style: { 'whiteSpace': 'unset' }\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Outbound Call Details\",\r\n                        accessor: \"sample1\",\r\n                        minWidth: 160,\r\n                        Cell: this.outboundFormatter\r\n                    }, {\r\n                        Header: \"Ringing No Response\",\r\n                        accessor: \"ringing_no_response\",\r\n                        minWidth: 80,\r\n                        // Cell: this.missedCallFormatter\r\n                    }, {\r\n                        Header: \"Total Orders Update\",\r\n                        accessor: \"total_distinct_order_updated\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Instruction Done\",\r\n                        accessor: \"instruction_done\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Feedback Done\",\r\n                        accessor: \"feedback_done\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Review Done\",\r\n                        accessor: \"review_done\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        //     Header: \"Orders Placed\",\r\n                        //     accessor: \"no_of_order_placed_by\",\r\n                        //     minWidth: 80,\r\n                        //     // Cell: this.userDetails\r\n                        // }, {\r\n                        //     Header: \"Average Talktime\",\r\n                        //     accessor: \"average_talk_time\",\r\n                        //     minWidth: 80,\r\n                        //     // Cell: this.userDetails\r\n                        // }, {\r\n                        Header: \"Activities\",\r\n                        accessor: \"email\",\r\n                        minWidth: 200,\r\n                        Cell: this.activityFormatter\r\n                    }, {\r\n                        Header: \"Total Talked Time\",\r\n                        accessor: \"total_talk_time\",\r\n                        minWidth: 80,\r\n                    }]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReportsTable;\r\n","import React from 'react';\r\nimport ReactTable, { ReactTableDefaults } from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n\r\nclass ReportsTable extends React.Component {\r\n\r\n    inboundFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Calls : </b>{rowInfo.total_inbound_call}</div>\r\n            <div><b>Connected Calls : </b>{rowInfo.connected_inbound_calls || 0}</div>\r\n        </div>\r\n    }\r\n\r\n    outboundFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Calls : </b>{rowInfo.total_outbound}</div>\r\n            <div><b>Connected Calls : </b>{rowInfo.total_outbound_connected || 0}</div>\r\n        </div>\r\n    }\r\n\r\n    missedCallFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Missed calls Calls :</b> {rowInfo.total_missed_call}</div>\r\n            <div><b>Handled Calls :</b> {rowInfo.missed_calls_handled}</div>\r\n            {/* <div><b>Total Times of Missed call:</b> {rowInfo.total_times_of_missed_call}</div>\r\n            <div><b>In Office Hours:</b> {rowInfo.missed_call_in_office_hours}</div>\r\n            <div><b>Beyond Office Hours:</b> {rowInfo.missed_call_beyond_office_hours}</div> */}\r\n        </div>\r\n    }\r\n\r\n    activityFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word activity-formatter\">\r\n            <div><b>working Time :</b> {rowInfo.total_working_time}</div>\r\n            <div><b>Break Time :</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Login Time:</b> {rowInfo.login_time}</div>\r\n            <div><b>Logout Time:</b> {rowInfo.logout_time}</div>\r\n            <div><b>Break Timing Log:</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Timing Log:</b> {rowInfo.timing_log}</div>\r\n        </div>\r\n    }\r\n\r\n    followUpDetails = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Date: </b>{rowInfo.followup_date}</div>\r\n            <div><b>Comments : </b>{rowInfo.followup_comments}</div>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        let { data } = this.props;\r\n        const columnDefaults = { ...ReactTableDefaults.column, headerClassName: 'wordwrap', tdClassName: 'wordwrap', Cell: 0 }\r\n        return (\r\n            <div className=\"reports-table-container\">\r\n                <ReactTable\r\n                    data={data} // verify once API is ready\r\n                    filterable\r\n                    minRows={0}\r\n                    pageSize={999}\r\n                    // PaginationComponent={() =>\r\n                    //     <PaginationComponent\r\n                    //         dropDownValues={dropDownValues}\r\n                    //         onLimitChange={this.onLimitChange}\r\n                    //         offset={this.state.offset}\r\n                    //         total={this.state.total}\r\n                    //         limit={this.state.limit}\r\n                    //         onPrevClick={this.handleClick}\r\n                    //         onNextClick={this.handleClick}\r\n                    //     />\r\n                    // }\r\n                    PaginationComponent={() => null}\r\n                    NoDataComponent={() => null}\r\n                    defaultFilterMethod={(filter, row) =>\r\n                        String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                    column={columnDefaults}\r\n                    columns={[{\r\n                        Header: 'S.No',\r\n                        id: 'row',\r\n                        maxWidth: 50,\r\n                        filterable: false,\r\n                        Cell: (row) => <div>{row.index + 1}</div>\r\n                    }, {\r\n                        Header: \"CET Detail\",\r\n                        accessor: \"agent_name\",\r\n                        minWidth: 120,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Followup Details\",\r\n                        accessor: \"total_outbound_call\",\r\n                        minWidth: 150,\r\n                        style: { 'whiteSpace': 'unset' },\r\n                        Cell: this.followUpDetails\r\n                    }, {\r\n                        Header: \"Median\",\r\n                        accessor: \"median\",\r\n                        minWidth: 80,\r\n                        // Cell: this.inboundFormatter\r\n                    }, {\r\n                        Header: \"Average\",\r\n                        accessor: \"average\",\r\n                        minWidth: 80,\r\n                        // Cell: this.inboundFormatter\r\n                    }, {\r\n                        Header: \"Outlier\",\r\n                        accessor: \"outlier\",\r\n                        minWidth: 80,\r\n                        // Cell: this.inboundFormatter\r\n                    }, {\r\n                        Header: \"Outbound Call Details\",\r\n                        accessor: \"sample2\",\r\n                        minWidth: 220,\r\n                        Cell: this.outboundFormatter\r\n                    }, {\r\n                        Header: \"Inbound Call Details\",\r\n                        accessor: \"sample2\",\r\n                        minWidth: 220,\r\n                        Cell: this.inboundFormatter\r\n                    }, {\r\n                        Header: \"Missed Call Details\",\r\n                        accessor: \"sample2\",\r\n                        minWidth: 220,\r\n                        Cell: this.missedCallFormatter\r\n                    }, {\r\n                        Header: \"Activities\",\r\n                        accessor: \"email\",\r\n                        minWidth: 200,\r\n                        Cell: this.activityFormatter\r\n                    }, {\r\n                        Header: \"Total Talked Time\",\r\n                        accessor: \"total_talked_time\",\r\n                        minWidth: 80,\r\n                    }]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReportsTable;\r\n","import React from 'react';\r\nimport ReactTable, { ReactTableDefaults } from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n\r\nclass ReportsTable extends React.Component {\r\n\r\n    inboundFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Calls : </b>{rowInfo.total_inbound_call}</div>\r\n            <div><b>Connected Calls : </b>{rowInfo.connected_inbound_calls || 0}</div>\r\n        </div>\r\n    }\r\n\r\n    missedCallFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word bottom-border\">\r\n            <div><b>Total Missed calls Calls :</b> {rowInfo.total_missed_call}</div>\r\n            <div><b>Handled Calls :</b> {rowInfo.missed_calls_handled}</div>\r\n            <div><b>Total Times of Missed call:</b> {rowInfo.total_times_of_missed_call}</div>\r\n            <div><b>In Office Hours:</b> {rowInfo.missed_call_in_office_hours}</div>\r\n            <div><b>Beyond Office Hours:</b> {rowInfo.missed_call_beyond_office_hours}</div>\r\n        </div>\r\n    }\r\n\r\n    activityFormatter = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word activity-formatter\">\r\n            <div><b>working Time :</b> {rowInfo.total_working_time}</div>\r\n            <div><b>Break Time :</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Login Time:</b> {rowInfo.login_time}</div>\r\n            <div><b>Logout Time:</b> {rowInfo.logout_time}</div>\r\n            <div><b>Break Timing Log:</b> {rowInfo.total_break_time}</div>\r\n            <div><b>Timing Log:</b> {rowInfo.timing_log}</div>\r\n        </div>\r\n    }\r\n\r\n    repeatCallLog = (props) => {\r\n        let rowInfo = props.original;\r\n        return <div className=\"break-word activity-formatter\">\r\n            <div> {rowInfo.sales_repeat_log}</div>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        let { data } = this.props;\r\n        const columnDefaults = { ...ReactTableDefaults.column, headerClassName: 'wordwrap', ClassName: 'wordwrap', Cell: 0 }\r\n        return (\r\n            <div className=\"reports-table-container\">\r\n                <ReactTable\r\n                    data={data} // verify once API is ready\r\n                    filterable\r\n                    minRows={0}\r\n                    pageSize={999}\r\n                    // PaginationComponent={() =>\r\n                    //     <PaginationComponent\r\n                    //         dropDownValues={dropDownValues}\r\n                    //         onLimitChange={this.onLimitChange}\r\n                    //         offset={this.state.offset}\r\n                    //         total={this.state.total}\r\n                    //         limit={this.state.limit}\r\n                    //         onPrevClick={this.handleClick}\r\n                    //         onNextClick={this.handleClick}\r\n                    //     />\r\n                    // }\r\n                    PaginationComponent={() => null}\r\n                    NoDataComponent={() => null}\r\n                    defaultFilterMethod={(filter, row) =>\r\n                        String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                    column={columnDefaults}\r\n                    columns={[{\r\n                        Header: 'S.No',\r\n                        id: 'row',\r\n                        maxWidth: 50,\r\n                        filterable: false,\r\n                        Cell: (row) => <div>{row.index + 1}</div>\r\n                    }, {\r\n                        Header: \"CET Detail\",\r\n                        accessor: \"agent_name\",\r\n                        minWidth: 120,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Outbound Calls\",\r\n                        accessor: \"total_outbound_call\",\r\n                        minWidth: 80,\r\n                        style: { 'whiteSpace': 'unset' }\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Inbound Call Details\",\r\n                        accessor: \"sample1\",\r\n                        minWidth: 160,\r\n                        Cell: this.inboundFormatter\r\n                    }, {\r\n                        Header: \"Missed Call Details\",\r\n                        accessor: \"sample2\",\r\n                        minWidth: 220,\r\n                        Cell: this.missedCallFormatter\r\n                    }, {\r\n                        Header: \"Repeat Call Log\",\r\n                        accessor: \"repeat_log\",\r\n                        minWidth: 150,\r\n                        Cell: this.repeatCallLog\r\n                    }, {\r\n                        Header: \"Mapping Query\",\r\n                        accessor: \"mapping_query\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"First Call Average\",\r\n                        accessor: \"first_call_average\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"First Call Median\",\r\n                        accessor: \"first_call_median\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Orders Placed\",\r\n                        accessor: \"no_of_order_placed_by\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Average Talktime\",\r\n                        accessor: \"average_talk_time\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                    }, {\r\n                        Header: \"Activities\",\r\n                        accessor: \"email\",\r\n                        minWidth: 200,\r\n                        Cell: this.activityFormatter\r\n                    }, {\r\n                        Header: \"Total Talked Time\",\r\n                        accessor: \"total_talk_time\",\r\n                        minWidth: 80,\r\n                        // Cell: this.userDetails\r\n                        // }, {\r\n                        //     Header: \"Inbound/Ticketing/Escalation\",\r\n                        //     filterable: false,\r\n                        //     minWidth: 220,\r\n                        //     Cell: this.additionalFeatures\r\n                        // }, {\r\n                        //     Header: \"Pod Leader\",\r\n                        //     accessor: \"pod_leader_email\",\r\n                        //     minWidth: 180,\r\n                        //     Cell: this.getPodLeader\r\n                        // }, {\r\n                        //     Header: \"Create Timestamp\",\r\n                        //     accessor: \"create_timestamp\",\r\n                        //     minWidth: 180,\r\n                        //     Cell: Timestamp,\r\n                        //     filterMethod: timestampFilter\r\n                        // }, {\r\n                        //     Header: \"Last Login Time\",\r\n                        //     accessor: \"last_login_timestamp\",\r\n                        //     minWidth: 180,\r\n                        //     Cell: Timestamp,\r\n                        //     filterMethod: timestampFilter\r\n                        // }, {\r\n                        //     Header: \"Actions\",\r\n                        //     filterable: false,\r\n                        //     width: 180,\r\n                        //     Cell: this.otherActions\r\n                    }]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReportsTable;\r\n","import React, { Component } from 'react';\r\nimport OcReportTable from '../OcReportTable';\r\nimport RTReportTable from '../RTReportTable';\r\nimport QueryReportTable from '../QueryReportTable';\r\n// import ConcernsReportTable from '../SalesReportTable';\r\nimport SalesReportTable from '../SalesReportTable';\r\n\r\nexport default class ReportTable extends Component {\r\n    render() {\r\n        let { data, team } = this.props;\r\n        return (\r\n            <div>\r\n                {team === \"oc\" && <OcReportTable data={data} />}\r\n                {team === \"rt\" && <RTReportTable data={data} />}\r\n                {team === \"query\" && <QueryReportTable data={data} />}\r\n                {team === \"concern\" && <QueryReportTable data={data} />}\r\n                {team === \"sales\" && <SalesReportTable data={data} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getReportAction, resetReportsDetails } from './action';\r\nimport { FormControl, FormHelperText, TextField } from '@material-ui/core';\r\nimport Button from '../../components/Button';\r\nimport { numberRegex } from '../../config/regex';\r\nimport ReportsTable from './components/Table';\r\nimport { getTodayDate } from '../../config/time';\r\n\r\nclass UniversalCallSearch extends Component {\r\n\r\n    state = {\r\n        fields: {\r\n            start_date: \"\",\r\n            end_date: \"\",\r\n            team: \"\"\r\n        },\r\n        errors: {\r\n            start_date: \"\",\r\n            end_date: \"\",\r\n            team: \"\"\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let { fields } = this.state;\r\n        fields.start_date = getTodayDate();\r\n        fields.end_date = getTodayDate();\r\n        fields.team = \"oc\";\r\n        this.setState({ fields }, () => this.props.getReportAction(this.state.fields));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetReportsDetails();\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let fieldName = event.target.name;\r\n        let filedValue = event.target.value;\r\n        let { fields, errors } = this.state;\r\n\r\n        switch (fieldName) {\r\n\r\n            case \"agentNumber\":\r\n                if (filedValue && numberRegex.test(filedValue) && filedValue.length <= 10) {\r\n                    fields[fieldName] = filedValue;\r\n                    // } else if (filedValue && numberRegex.test(filedValue)) {\r\n                    //     fields[fieldName] = filedValue;\r\n                } else if (!filedValue) {\r\n                    fields[fieldName] = \"\";\r\n                    // errors[fieldName] = \"Agent Number is Required!\";\r\n                }\r\n                break;\r\n\r\n            case \"customerNumber\":\r\n                if (filedValue && numberRegex.test(filedValue) && filedValue.length <= 10) {\r\n                    fields[fieldName] = filedValue;\r\n                    // } else if (filedValue && numberRegex.test(filedValue)) {\r\n                    //     fields[fieldName] = filedValue;\r\n                } else if (!filedValue) {\r\n                    fields[fieldName] = \"\";\r\n                    // errors[fieldName] = \"Customer Number is Required!\";\r\n                }\r\n                break;\r\n\r\n            case \"team\":\r\n                fields[fieldName] = filedValue;\r\n                this.props.resetReportsDetails();   //  Reset on Role Change\r\n                break;\r\n\r\n            default: fields[fieldName] = filedValue;\r\n        }\r\n\r\n        this.setState({ fields, errors }, () => console.log(this.state));\r\n    }\r\n\r\n    search = (event) => {\r\n        event.preventDefault();\r\n        let { fields } = this.state;\r\n        console.log(\"Searching...\");\r\n        this.props.getReportAction(fields);\r\n    }\r\n\r\n    render() {\r\n        let { fields, errors } = this.state;\r\n        let { reportDetails } = this.props;\r\n        return (\r\n            <div className=\"teaml-reports-container\">\r\n                <form className=\"teaml-reports-form\">\r\n                    <FormControl className=\"full-width form-control-custom custom-width\" error={errors.startDate}>\r\n                        {/* <InputLabel htmlFor=\"startDate\">Start Date</InputLabel> */}\r\n                        <TextField\r\n                            id=\"startDate\"\r\n                            name=\"start_date\"\r\n                            label=\"Start Date\"\r\n                            type=\"date\"\r\n                            value={fields.start_date}\r\n                            onChange={this.handleChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <FormHelperText id=\"startDate\">{errors.startDate}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <FormControl className=\"full-width form-control-custom custom-width\" error={errors.endDate}>\r\n                        {/* <InputLabel htmlFor=\"endDate\">End Date</InputLabel> */}\r\n                        <TextField\r\n                            id=\"endDate\"\r\n                            name=\"end_date\"\r\n                            label=\"End Date\"\r\n                            type=\"date\"\r\n                            value={fields.end_date}\r\n                            onChange={this.handleChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <FormHelperText id=\"endDate\">{errors.endDate}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <div>\r\n                        <div>Roles</div>\r\n                        <select\r\n                            name=\"team\"\r\n                            className=\"custom-dropdown\"\r\n                            id=\"demo-simple-select\"\r\n                            value={fields.team}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <option value={\"oc\"}>OC</option>\r\n                            <option value={\"rt\"}>RT</option>\r\n                            <option value={\"query\"}>Query</option>\r\n                            <option value={\"concern\"}>Concern</option>\r\n                            <option value={\"sales\"}>Sales</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <Button\r\n                        label={\"Search\"}\r\n                        type=\"submit\"\r\n                        onClick={this.search}\r\n                    />\r\n                </form>\r\n\r\n                {Array.isArray(reportDetails) && reportDetails.length > 0 &&\r\n                    <div className=\"react-table-container\">\r\n                        {/* <div className=\"warning-note\"><b>Note:</b> If you don't select any date range, it will pull last 1 week records</div> */}\r\n                        <ReportsTable data={reportDetails} team={fields.team} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        reportDetails: state.reportDetails.reports\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ getReportAction, resetReportsDetails }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UniversalCallSearch);\r\n"],"sourceRoot":""}