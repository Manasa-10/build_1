{"version":3,"sources":["utilities/fileHandler.js","containers/UploadCODCollectionSheet/components/UploadCODCollectionSheetForm/index.js","containers/UploadCODCollectionSheet/action.js","containers/UploadCODCollectionSheet/components/Table/index.js","containers/UploadCODCollectionSheet/index.js"],"names":["convertBase64","file","callback","base64Converted","reader","FileReader","readAsDataURL","onloadend","fileData","result","split","length","FileListItem","a","c","b","slice","call","Array","isArray","arguments","d","File","TypeError","ClipboardEvent","clipboardData","DataTransfer","items","add","files","UploadCODCollectionSheetForm","Component","state","data","enableSubmit","fileInput","React","createRef","resetForm","this","setState","current","validateForm","validForm","every","field","uploadSheet","props","resetData","handleChange","event","fieldName","target","name","fieldValue","value","image","componentWillReceiveProps","reset","render","className","type","onChange","ref","accept","encType","Button","label","onClick","disabled","rel","href","apiURLOriginal","download","uploadSheetAction","dispatch","showLoader","uploadSheetFinance","then","response","hideLoader","UPLOAD_SHEET_SUCCESS","uploadSuccess","message","catch","error","handleError","RESET_SHEET_DETAILS","resetUloadComponent","RESET_COMPOENENT_DETAILS","Table","tabs","key","activeTab","success_count","map","tab","index","row","UploadCODCollectionSheet","componentWillUnmount","PageHeader","header","successData","connect","ownProps","importSheetFinance","bindActionCreators"],"mappings":"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","file":"static/js/26.17ab80c9.chunk.js","sourcesContent":["export const convertBase64 = (file, callback) => {\r\n    //  Return Base64 in callback\r\n    if (!file) return;\r\n    let base64Converted;\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onloadend = () => {\r\n        let fileData = reader.result.split(\",\");    //  Spilting and removing header part(that contains file type etc)\r\n        base64Converted = fileData.length > 0 ? fileData[1] : reader.result;\r\n\r\n        callback(base64Converted);\r\n    }\r\n    //  using of call back\r\n    //  (result) => {\r\n    //      console.log(result);\r\n    //  }\r\n}\r\n\r\nexport function FileListItem(a) {\r\n    //  For Reseting the event.target.files after API success.\r\n    a = [].slice.call(Array.isArray(a) ? a : arguments)\r\n    for (var c, b = c = a.length, d = !0; b-- && d;) d = a[b] instanceof File\r\n    if (!d) throw new TypeError(\"expected argument to FileList is File or array of File objects\")\r\n    for (b = (new ClipboardEvent(\"\")).clipboardData || new DataTransfer(); c--;) b.items.add(a[c])\r\n    return b.files\r\n\r\n\r\n    //  Do the following\r\n    //  this.fileInput = React.createRef();     ------->        Add it in Constructor\r\n    //  this.fileInput.current.files = FileListItem([]);    ->  Add it in reset() Method\r\n    //  ref={this.fileInput}                    ------->        Add it in Input Tag\r\n}\r\n\r\nexport const convetBase64ToImage = (base64String) => {\r\n    return \"data:image/jpeg;base64,\" + base64String;\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport Button from '../../../../components/Button';\r\nimport { convertBase64, FileListItem } from '../../../../utilities/fileHandler';\r\nimport { apiURLOriginal } from '../../../../api/axiosApi';\r\n\r\nclass UploadCODCollectionSheetForm extends Component {\r\n\r\n    state = {\r\n        data: {\r\n            // \"sheet_type\": \"\",\r\n            \"attachments\": \"\"\r\n        },\r\n        enableSubmit: false\r\n    }\r\n\r\n    fileInput = React.createRef();\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.reset) {\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            data: {\r\n                // \"sheet_type\": \"\",\r\n                \"attachments\": \"\"\r\n            },\r\n            enableSubmit: false\r\n        });\r\n        this.fileInput.current.files = FileListItem([]);\r\n    }\r\n\r\n    validateForm = () => {\r\n        let { data } = this.state;\r\n        let validForm = false;\r\n        let requiredFields = [\r\n            // \"sheet_type\",\r\n            \"attachments\"\r\n        ];\r\n        validForm = requiredFields.every(field => data[field] !== \"\");\r\n        this.setState({ enableSubmit: validForm });\r\n    }\r\n\r\n    uploadSheet = () => {\r\n        let { data } = this.state;\r\n\r\n        this.props.resetData &&\r\n            this.props.resetData(data);\r\n\r\n        this.props.uploadSheet &&\r\n            this.props.uploadSheet(data);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let { data } = this.state;\r\n        let fieldName = event.target.name;\r\n        let fieldValue = event.target.value;\r\n        switch (fieldName) {\r\n            case \"attachments\":\r\n                let { files } = event.target;\r\n                // let allowedImageSize = 5 * 1024 * 1024; // 5MB Image size\r\n                if (files.length > 0) {\r\n                    // if (files[0].size <= allowedImageSize) {\r\n                    let image = this.fileInput.current.files[0]\r\n                    convertBase64(image, (result) => {\r\n                        data[\"attachments\"] = result;\r\n                        this.setState({ data }, () => {\r\n                            this.validateForm();\r\n                        });\r\n                    });\r\n                    // }\r\n                }\r\n                data[fieldName] = fieldValue;\r\n                break;\r\n            default: data[fieldName] = fieldValue;\r\n                break;\r\n        }\r\n        this.setState({ data }, () => this.validateForm());\r\n    }\r\n\r\n    render() {\r\n        // let { data } = this.state;\r\n        return (\r\n            <form className=\"upload-affiliate-sheet\">\r\n                {/* <div className=\"input-container\">\r\n                    <b className=\"input-label\">Import Type</b>\r\n                    <div className=\"flex-container\">\r\n                        <div className=\"field-container\">\r\n                            <input id=\"sheet_type-1\" name=\"sheet_type\" type=\"radio\" onChange={this.handleChange} checked={data.sheet_type === \"1\"} value={1} />\r\n                            <label htmlFor=\"sheet_type-1\">Amazon</label>\r\n                        </div>\r\n\r\n                        <div className=\"field-container\">\r\n                            <input id=\"sheet_type-2\" name=\"sheet_type\" type=\"radio\" onChange={this.handleChange} checked={data.sheet_type === \"2\"} value={2} />\r\n                            <label htmlFor=\"sheet_type-2\">Pepperfry</label>\r\n                        </div>\r\n\r\n                        <div className=\"field-container\">\r\n                            <input id=\"sheet_type-3\" name=\"sheet_type\" type=\"radio\" onChange={this.handleChange} checked={data.sheet_type === \"3\"} value={3} />\r\n                            <label htmlFor=\"sheet_type-3\">Flipkart</label>\r\n                        </div>\r\n                    </div>\r\n                </div> */}\r\n\r\n                <div className=\"input-container\">\r\n                    <b className=\"input-label\">Upload</b>\r\n                    <div className=\"field-container upload\">\r\n                        <input\r\n                            name=\"attachments\"\r\n                            className=\"attachment\"\r\n                            type=\"file\"\r\n                            onChange={this.handleChange}\r\n                            // multiple={true}\r\n                            // value={data.attachments}\r\n                            ref={this.fileInput}\r\n                            accept=\".xlsx, .xls, .csv\"\r\n                            encType=\"multipart/form-data\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"field-container\">\r\n                    <Button\r\n                        label={\"Upload\"}\r\n                        onClick={this.uploadSheet}\r\n                        disabled={!this.state.enableSubmit}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <a\r\n                        className=\"download-link\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        href={`${apiURLOriginal}/static/backoffice/excels/cod-collection-finance-sample-upload.xlsx`}\r\n                        download\r\n                    >Download Sample Sheet</a>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UploadCODCollectionSheetForm;\r\n","import { UPLOAD_SHEET_SUCCESS, RESET_SHEET_DETAILS, RESET_COMPOENENT_DETAILS } from \"./constants\";\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\nimport handleError from \"../../errorHandler\";\r\nimport { uploadSheetFinance } from \"../../api\";\r\n\r\nexport function uploadSheetAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        uploadSheetFinance(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(uploadSuccess(response.data.message));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function uploadSuccess(data) {\r\n    return {\r\n        type: UPLOAD_SHEET_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function resetData() {\r\n    return {\r\n        type: RESET_SHEET_DETAILS\r\n    }\r\n}\r\n\r\nexport function resetUloadComponent() {\r\n    return {\r\n        type: RESET_COMPOENENT_DETAILS\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './style.scss';\r\n\r\nclass Table extends React.Component {\r\n\r\n    state = {\r\n        tabs: [{\r\n            label: \"Existing\",\r\n            key: \"existing_invoice_list\"\r\n        }, {\r\n            label: \"Failed\",\r\n            key: \"failed_invoice_list\"\r\n        }],\r\n        activeTab: \"existing_invoice_list\"\r\n    }\r\n\r\n    handleChange = (key) => {\r\n        this.setState({ activeTab: key });\r\n    }\r\n\r\n    render() {\r\n        let { tabs, activeTab } = this.state;\r\n        let { data } = this.props;\r\n        return (\r\n            <div className=\"import-cod-data-table\">\r\n                <div className=\"success-message\"><b>{data.success_count}</b> got Imported!</div>\r\n                <div className=\"title\">Existing/Failed</div>\r\n                <div className=\"tabs-container\">{tabs.map((tab, index) =>\r\n                    <div key={`tab-${index}`} className={tab.key === activeTab ? \"import-tab active\" : \"import-tab\"} onClick={() => this.handleChange(tab.key)}>{tab.label}</div>)}\r\n                </div>\r\n                <table className=\"table\">\r\n                    <tr>\r\n                        <th className=\"slno\">S.No</th>\r\n                        <th className=\"invoice-number\">Invoice</th>\r\n                    </tr>\r\n                    {data[activeTab].map((row, index) => {\r\n                        return <tr key={`error-row-${index}`}>\r\n                            <td className=\"slno\">{index + 1}</td>\r\n                            <td className=\"invoice-number\">{row}</td>\r\n                        </tr>\r\n                    })}\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport './style.scss';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport UploadCODCollectionSheetForm from './components/UploadCODCollectionSheetForm';\r\nimport { uploadSheetAction, resetData, resetUloadComponent } from './action';\r\nimport Table from './components/Table';\r\n\r\nclass UploadCODCollectionSheet extends Component {\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetUloadComponent();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"import-cod-collection-container\">\r\n                <PageHeader\r\n                    header={\"Import COD Collection\"}\r\n                />\r\n                <div className=\"import-cod-collection-content\">\r\n                    <UploadCODCollectionSheetForm\r\n                        reset={this.props.reset}\r\n                        uploadSheet={this.props.uploadSheetAction}\r\n                        resetData={this.props.resetData}\r\n                    />\r\n                    {this.props.successData &&\r\n                        <Table\r\n                            data={this.props.successData}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        successData: state.importSheetFinance.successData,\r\n        reset: state.importSheetFinance.reset\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ uploadSheetAction, resetData, resetUloadComponent }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadCODCollectionSheet);\r\n"],"sourceRoot":""}