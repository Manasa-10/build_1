{"version":3,"sources":["utilities/getRoleByUserDetails.js","containers/OrderSearch/action.js","containers/ProcessInvoiceDocket/index.js"],"names":["getRoleByUserDetails","userDetails","role","includes","orderSearchAction","data","dispatch","showLoader","universalOrderSearch","then","response","resetRefreshOrders","type","GET_ORDER_SEARCH_SUCCESS","orderSearchSuccess","hideLoader","catch","error","handleError","updateOperationsDataAction","updateOperationsData","message","toast","success","UPDATE_OPERATION_DATA_SUCCESS","updateOperationsDataSuccess","refreshOrders","resetOrderSearch","RESET_ORDER_SEARCH","resetOrderSearchComponent","RESET_ORDER_SEARCH_COMPONENT","enableSaleBenefitAction","enableSaleBenefit","generateDocketAction","generateDocket","applyPriceDropRefundAction","applyPriceDropRefund","getAllQueryConcernAction","getQueryConcernCetMembers","GET_ALL_Q_C_DATA","updateCETMemberAction","updateAssignCETMember","markAsDeliveredAction","markAsDelivered","ProcessInvoiceDocket","React","Component","state","cartIds","handleChange","event","this","target","value","setState","onSubmit","preventDefault","payload","props","login_id","is_bulk","render","className","header","name","onChange","placeholder","label","disabled","onClick","connect","ownProps","bindActionCreators"],"mappings":"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","file":"static/js/37.d2072668.chunk.js","sourcesContent":["export const getRoleByUserDetails = (userDetails) => {\r\n    if (userDetails) {\r\n        if (userDetails.role) {\r\n            if (userDetails.role.includes(\"TEAML\")) {\r\n                return \"TeamLeader\";\r\n            } else if (userDetails.role.includes(\"CET\") || userDetails.role.includes(\"OC\") || userDetails.role.includes(\"RT\") || userDetails.role.includes(\"Q\") || userDetails.role.includes(\"C\")) {\r\n                return \"CustomerExperienceTeam\";\r\n            } else if (userDetails.role.includes(\"FINANCE\")) {\r\n                return \"Finance\";\r\n            } else if (userDetails.role.includes(\"OPS\")) {\r\n                return \"OperationsTeam\";\r\n            } else if (userDetails.role.includes(\"SALES\")) {\r\n                return \"SalesTeam\";\r\n            } else if (userDetails.role.includes(\"PARTNERSHIPS\")) {\r\n                return \"Partnerships\";\r\n            } else if (userDetails.role.includes(\"ADMIN\")) {\r\n                return \"Admin\";\r\n            } else if (userDetails.role.includes(\"COUPON MANAGER\")) {\r\n                return \"Coupon manager\";\r\n            }\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n","import { GET_ORDER_SEARCH_SUCCESS, RESET_ORDER_SEARCH, GET_ALL_Q_C_DATA, RESET_ORDER_SEARCH_COMPONENT, UPDATE_OPERATION_DATA_SUCCESS } from \"./constants\";\r\nimport {\r\n    universalOrderSearch,\r\n    enableSaleBenefit,\r\n    generateDocket,\r\n    applyPriceDropRefund,\r\n    markAsDelivered,\r\n    updateAssignCETMember,\r\n    getQueryConcernCetMembers,\r\n    updateOperationsData\r\n} from '../../api';\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\n\r\nimport handleError from \"../../errorHandler\";\r\nimport { resetRefreshOrders, refreshOrders } from \"../Dashboard/action\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport function orderSearchAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        universalOrderSearch(data)\r\n            .then(response => {\r\n                dispatch(resetRefreshOrders());\r\n                dispatch(orderSearchSuccess(response.data));\r\n                dispatch(hideLoader());\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    };\r\n}\r\n\r\nexport function orderSearchSuccess(data) {\r\n    return {\r\n        type: GET_ORDER_SEARCH_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function updateOperationsDataAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        updateOperationsData(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                response.data.message && toast.success(response.data.message);\r\n                dispatch(updateOperationsDataSuccess(response.data));\r\n                dispatch(refreshOrders());\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    };\r\n}\r\n\r\nexport function updateOperationsDataSuccess(data) {\r\n    return {\r\n        type: UPDATE_OPERATION_DATA_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function resetOrderSearch() {\r\n    return {\r\n        type: RESET_ORDER_SEARCH\r\n    }\r\n}\r\n\r\nexport function resetOrderSearchComponent() {\r\n    return {\r\n        type: RESET_ORDER_SEARCH_COMPONENT\r\n    }\r\n}\r\n\r\nexport function enableSaleBenefitAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        enableSaleBenefit(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(refreshOrders());\r\n                toast.success(response.data.message);\r\n                // dispatch(enableSaleBenefitSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    };\r\n}\r\n\r\nexport function generateDocketAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        generateDocket(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(refreshOrders());\r\n                toast.success(response.data.message);\r\n                // dispatch(enableSaleBenefitSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    };\r\n}\r\n\r\nexport function applyPriceDropRefundAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        applyPriceDropRefund(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(refreshOrders());\r\n                toast.success(response.data.message);\r\n                // dispatch(enableSaleBenefitSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    };\r\n}\r\n\r\n\r\nexport function getAllQueryConcernAction() {\r\n    return (dispatch) => {\r\n        // dispatch(showLoader());\r\n        getQueryConcernCetMembers()\r\n            .then(response => {\r\n                // dispatch(hideLoader());\r\n                dispatch(queryConcernCETsuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function queryConcernCETsuccess(data) {\r\n    return {\r\n        type: GET_ALL_Q_C_DATA,\r\n        data\r\n    }\r\n}\r\n\r\nexport function updateCETMemberAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        updateAssignCETMember(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(refreshOrders());\r\n                toast.success(response.data.message);\r\n                // dispatch(updateCetSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    };\r\n}\r\n\r\nexport function markAsDeliveredAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        markAsDelivered(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(refreshOrders());\r\n                toast.success(response.data.message);\r\n                // dispatch(enableSaleBenefitSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport './style.scss';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Button from '../../components/Button';\r\nimport { getRoleByUserDetails } from '../../utilities/getRoleByUserDetails';\r\n\r\nimport { generateDocketAction } from '../OrderSearch/action';\r\n\r\nclass ProcessInvoiceDocket extends React.Component {\r\n\r\n    state = {\r\n        data: {\r\n            cartIds: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let { data } = this.state;\r\n        data[\"cartIds\"] = event.target.value\r\n        this.setState({ data });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        let { data } = this.state;\r\n        let cart_list = data.cartIds;\r\n\r\n        let payload = {\r\n            'cart_id': cart_list,\r\n            // 'affiliate_id': row.affiliate_id,\r\n            'request_by_id': this.props.userDetails.login_id,\r\n            'request_by_role': getRoleByUserDetails(this.props.userDetails),\r\n            is_bulk: true\r\n        }\r\n        this.props.generateDocketAction(payload);\r\n    }\r\n\r\n    render() {\r\n        let title = `Process Invoice & Docket`;\r\n        let { data } = this.state;\r\n        return (\r\n            <div className=\"invoice-docket-container\">\r\n                <PageHeader\r\n                    header={title}\r\n                />\r\n                <div className=\"invoice-docket-content\">\r\n                    <div className=\"invoice-docket-form\">\r\n                        <textarea className=\"input-field\" name=\"cartIds\" onChange={this.handleChange} value={data.cartIds} placeholder=\"Enter Cart Ids\"></textarea>\r\n                        <Button\r\n                            label={\"Process Invoice or Docket\"}\r\n                            disabled={data.cartIds === \"\"}\r\n                            onClick={this.onSubmit}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        userDetails: state.userDetails\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ generateDocketAction }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProcessInvoiceDocket);\r\n"],"sourceRoot":""}