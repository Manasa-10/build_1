{"version":3,"sources":["utilities/fileHandler.js","containers/StockManagement/action.js","containers/StockManagement/components/Table/index.js","containers/StockManagement/components/UploadStock/index.js","containers/StockManagement/index.js"],"names":["convertBase64","file","callback","base64Converted","reader","FileReader","readAsDataURL","onloadend","fileData","result","split","length","FileListItem","a","c","b","slice","call","Array","isArray","arguments","d","File","TypeError","ClipboardEvent","clipboardData","DataTransfer","items","add","files","getStockDetailsAction","platform","slug","role","limit","offset","dispatch","showLoader","getStockDetails","then","response","data","hideLoader","status","type","GET_STOCK_DETAILS","catch","error","handleError","resetStock","RESET_STOCK_DETAILS","uploadStockAction","uploadStock","uploadSuccess","toast","success","message","UPLOAD_SUCCSESS","Table","Component","render","stock","this","props","filterable","minRows","pageSize","PaginationComponent","NoDataComponent","defaultFilterMethod","filter","row","String","id","toLocaleLowerCase","includes","value","columns","Header","maxWidth","Cell","index","accessor","minWidth","UploadStock","constructor","super","resetForm","setState","enableSubmit","fileInput","current","validateForm","state","validForm","every","field","handleChange","event","fieldName","target","name","fieldValue","image","payload","React","createRef","componentWillReceiveProps","reset","className","onChange","multiple","ref","accept","encType","Button","label","onClick","disabled","rel","href","apiURLOriginal","download","StockManagement","getNoStock","style","fontSize","componentDidMount","refreshStock","componentWillUnmount","PageHeader","header","count","connect","ownProps","stockManagement","bindActionCreators"],"mappings":"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","file":"static/js/33.c8270a7c.chunk.js","sourcesContent":["export const convertBase64 = (file, callback) => {\r\n    //  Return Base64 in callback\r\n    if (!file) return;\r\n    let base64Converted;\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onloadend = () => {\r\n        let fileData = reader.result.split(\",\");    //  Spilting and removing header part(that contains file type etc)\r\n        base64Converted = fileData.length > 0 ? fileData[1] : reader.result;\r\n\r\n        callback(base64Converted);\r\n    }\r\n    //  using of call back\r\n    //  (result) => {\r\n    //      console.log(result);\r\n    //  }\r\n}\r\n\r\nexport function FileListItem(a) {\r\n    //  For Reseting the event.target.files after API success.\r\n    a = [].slice.call(Array.isArray(a) ? a : arguments)\r\n    for (var c, b = c = a.length, d = !0; b-- && d;) d = a[b] instanceof File\r\n    if (!d) throw new TypeError(\"expected argument to FileList is File or array of File objects\")\r\n    for (b = (new ClipboardEvent(\"\")).clipboardData || new DataTransfer(); c--;) b.items.add(a[c])\r\n    return b.files\r\n\r\n\r\n    //  Do the following\r\n    //  this.fileInput = React.createRef();     ------->        Add it in Constructor\r\n    //  this.fileInput.current.files = FileListItem([]);    ->  Add it in reset() Method\r\n    //  ref={this.fileInput}                    ------->        Add it in Input Tag\r\n}\r\n\r\nexport const convetBase64ToImage = (base64String) => {\r\n    return \"data:image/jpeg;base64,\" + base64String;\r\n}\r\n","import { GET_STOCK_DETAILS, RESET_STOCK_DETAILS, UPLOAD_SUCCSESS } from \"./constants\";\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\nimport handleError from \"../../errorHandler\";\r\nimport { getStockDetails, uploadStock } from \"../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport function getStockDetailsAction(platform, slug, role, limit, offset) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        // getStockDetails(limit, offset)\r\n        getStockDetails()\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                if (response.status === 200) {\r\n                    dispatch(getStockSuccess(response.data));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getStockSuccess(data) {\r\n    return {\r\n        type: GET_STOCK_DETAILS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function resetStock() {\r\n    return {\r\n        type: RESET_STOCK_DETAILS\r\n    }\r\n}\r\n\r\nexport function uploadStockAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        uploadStock(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(uploadSuccess(response.data));\r\n                toast.success(response.data.message || \"Success.\");\r\n            })\r\n            .catch(error => {\r\n                dispatch(uploadSuccess());\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function uploadSuccess(data) {\r\n    return {\r\n        type: UPLOAD_SUCCSESS,\r\n        data\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n\r\nexport default class Table extends Component {\r\n    render() {\r\n        let { stock } = this.props;\r\n        return (\r\n            <ReactTable\r\n                data={stock}\r\n                filterable\r\n                minRows={0}\r\n                pageSize={9999}\r\n                PaginationComponent={() => null}\r\n                //     <PaginationComponent\r\n                //         dropDownValues={dropDownValues}\r\n                //         onLimitChange={this.onLimitChange}\r\n                //         offset={this.state.offset}\r\n                //         total={this.state.total}\r\n                //         limit={this.state.limit}\r\n                //         onPrevClick={this.handleClick}\r\n                //         onNextClick={this.handleClick}\r\n                //     />\r\n                // }\r\n                NoDataComponent={() => null}\r\n                defaultFilterMethod={(filter, row) =>\r\n                    String(row[filter.id]).toLocaleLowerCase().includes(filter.value.toLocaleLowerCase())}\r\n                columns={[{\r\n                    Header: 'S.No',\r\n                    id: 'row',\r\n                    maxWidth: 50,\r\n                    filterable: false,\r\n                    Cell: (row) => <div>{row.index + 1}</div>\r\n                }, {\r\n                    Header: \"Warehouse\",\r\n                    accessor: \"warehouse_name\",\r\n                    minWidth: 180,\r\n                }, {\r\n                    Header: \"Product Sku\",\r\n                    accessor: \"product_sku\",\r\n                    minWidth: 180,\r\n                }, {\r\n                    Header: \"Quantity\",\r\n                    accessor: \"quantity\",\r\n                    minWidth: 180,\r\n                }, {\r\n                    Header: \"Item Dimension\",\r\n                    accessor: \"item_dimensions\",\r\n                    minWidth: 180,\r\n                },]}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport Button from '../../../../components/Button';\r\nimport { convertBase64, FileListItem } from '../../../../utilities/fileHandler';\r\nimport { apiURLOriginal } from '../../../../api/axiosApi';\r\n\r\nexport default class UploadStock extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                \"import-type\": \"\",\r\n                \"attachments\": \"\"\r\n            },\r\n            enableSubmit: false\r\n        }\r\n        this.fileInput = React.createRef();\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.reset) {\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            data: {\r\n                \"import-type\": \"\",\r\n                \"attachments\": \"\"\r\n            },\r\n            enableSubmit: false\r\n        });\r\n        this.fileInput.current.files = FileListItem([]);\r\n    }\r\n\r\n    validateForm = () => {\r\n        let { data } = this.state;\r\n        let validForm = false;\r\n        let requiredFields = [\"import-type\", \"attachments\"];\r\n        validForm = requiredFields.every(field => data[field] !== \"\");\r\n        this.setState({ enableSubmit: validForm });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let fieldName = event.target.name;\r\n        let fieldValue = event.target.value;\r\n        let { data } = this.state;\r\n\r\n        if (fieldName === \"attachments\") {\r\n            let { files } = event.target;\r\n            // let allowedImageSize = 5 * 1024 * 1024; // 5MB Image size\r\n            if (files.length > 0) {\r\n                // if (files[0].size <= allowedImageSize) {\r\n                let image = this.fileInput.current.files[0]\r\n                convertBase64(image, (result) => {\r\n                    data[\"attachments\"] = result;\r\n                    this.setState({ data }, () => {\r\n                        this.validateForm();\r\n                    });\r\n                });\r\n                // }\r\n            }\r\n        } else {\r\n            switch (fieldName) {\r\n                default:\r\n                    data[fieldName] = fieldValue;\r\n                    break;\r\n            }\r\n        }\r\n        this.setState({ data }, () => {\r\n            this.validateForm();\r\n        });\r\n    }\r\n\r\n    uploadStock = () => {\r\n        let { data } = this.state;\r\n        let payload = {\r\n            ...data\r\n        };\r\n        this.props.uploadStockAction(payload);\r\n    }\r\n\r\n    render() {\r\n        let { data } = this.state;\r\n        return (\r\n            <div className=\"stock-upload-container\">\r\n                <h2>Stock Import</h2>\r\n                <div className=\"field-container\">\r\n                    <b>Upload Type</b>\r\n                    <select className=\"custom-dropdown\" name=\"import-type\" value={data[\"import-type\"]} onChange={this.handleChange}>\r\n                        <option>select</option>\r\n                        <option value=\"update\">Update</option>\r\n                        <option value=\"replace\">Replace</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"field-container\">\r\n                    <b>Upload</b>\r\n                    <input\r\n                        name=\"attachments\"\r\n                        className=\"attachment\"\r\n                        type=\"file\"\r\n                        onChange={this.handleChange}\r\n                        multiple={true}\r\n                        // value={data.attachments}\r\n                        ref={this.fileInput}\r\n                        accept=\".xlsx, .xls, .csv\"\r\n                        encType=\"multipart/form-data\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"field-container flex-container\">\r\n                    <Button\r\n                        label={\"Upload\"}\r\n                        onClick={this.uploadStock}\r\n                        disabled={!this.state.enableSubmit}\r\n                    />\r\n                    <a\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        href={`${apiURLOriginal}/static/backoffice/excels/Sample_Stock_Sheet.xlsx`}\r\n                        download\r\n                    >Download Sample Sheet</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport './style.scss';\r\nimport { getStockDetailsAction, resetStock, uploadStockAction } from './action';\r\nimport StockTable from './components/Table';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport UploadStock from './components/UploadStock';\r\n\r\nclass StockManagement extends Component {\r\n\r\n    state = {};\r\n\r\n    componentDidMount() {\r\n        this.props.getStockDetailsAction();\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.refreshStock) {\r\n            this.props.getStockDetailsAction();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetStock();\r\n    }\r\n\r\n    getNoStock = () => <div style={{ fontSize: \"14px\" }}> No Stock...</div>\r\n\r\n    render() {\r\n        let title = \"Stock Management\"\r\n        let { stock } = this.props;\r\n        return (\r\n            <div className=\"stock-management-container\">\r\n                <PageHeader\r\n                    header={title}\r\n                    count={Array.isArray(stock) && stock.length}\r\n                />\r\n                <div className=\"stock-table-upload-container\">\r\n                    {Array.isArray(stock) && stock.length > 0 ?\r\n                        <StockTable\r\n                            stock={stock}\r\n                        />\r\n                        :\r\n                        this.getNoStock()\r\n                    }\r\n                    <UploadStock\r\n                        reset={this.props.refreshStock}\r\n                        uploadStockAction={this.props.uploadStockAction}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        stock: state.stockManagement.stock,\r\n        refreshStock: state.stockManagement.refreshStock\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ getStockDetailsAction, resetStock, uploadStockAction }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StockManagement);\r\n"],"sourceRoot":""}