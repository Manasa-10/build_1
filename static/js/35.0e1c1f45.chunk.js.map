{"version":3,"sources":["components/Alert/index.js","containers/CreateCoupon/action.js","containers/CreateCoupon/index.js"],"names":["CustomAlert","Component","state","toggle","handleCollapse","this","setState","props","callbackOnClose","componentDidMount","render","message","title","type","in","style","width","severity","action","aria-label","color","size","onClick","fontSize","defaultProps","getCategoriesAction","dispatch","getCouponsCategories","then","response","data","GET_COUPON_CATEGORIES_SUCCESS","catch","error","handleError","createCouponAction","showLoader","createCoupon","hideLoader","toggleCouponDataRefresh","CREATE_COUPON_SUCCESS","createCouponSuccess","updateCouponAction","editCoupon","getCouponByIdSuccess","toast","success","getCouponByIdAction","getCouponById","GET_COUPON_DETAILS_SUCCESS","TOGGLE_COUPON_REFRESH","resetCouponComponentAction","RESET_COMPONENT_DATA","resetAfterTheDataLoaded","RESET_COUPON_VAR","couponType","id","label","value","CreateCoupon","fields","coupon_type","coupon_classification","coupon_code","coupon_percentage","coupon_accessories_percentage","coupon_cot_percentage","coupon_flat_discount","coupon_max_discount","coupon_min_amount","start_date","end_date","coupon_description","errors","valid","gettingExistingCouponData","resetComponent","couponData","handleChange","event","fieldName","target","name","fieldValue","fieldsCanBeZero","fieldsCanContainAmount","fieldNameText","decimalRegex","test","numberArray","String","split","Number","includes","length","console","log","checkValidity","preventDefault","hasErrors","validForm","requiredFields","Object","keys","map","key","index","every","field","some","handleSubmit","userDetails","couponId","login_id","payload","coupon_id","componentWillReceiveProps","reloadComponentWithFreshData","refreshData","coupon_classification_id","componentWillUnmount","coupon_uid","categories","successData","className","header","labelId","onChange","Array","isArray","classification","htmlFor","aria-describedby","fullWidth","disabled","InputLabelProps","shrink","rowsMin","connect","ownProps","couponsDetails","couponCategories","resetCouponData","bindActionCreators"],"mappings":"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","file":"static/js/35.0e1c1f45.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nclass CustomAlert extends Component {\r\n\r\n    state = {\r\n        toggle: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { toggle } = this.props;\r\n        this.setState({ toggle });\r\n    }\r\n\r\n    handleCollapse = (toggle) => this.setState({ toggle }, () => this.props.callbackOnClose && this.props.callbackOnClose());\r\n\r\n    render() {\r\n        let { message, title, type } = this.props;\r\n        let { toggle } = this.state;\r\n        return (\r\n            <Collapse in={toggle} style={{ width: '100%' }}>\r\n                <Alert\r\n                    severity={type}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={() => this.handleCollapse(false)}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    {title && <AlertTitle>{title}</AlertTitle>}\r\n                    {message}\r\n                </Alert>\r\n            </Collapse>\r\n        );\r\n    }\r\n}\r\n\r\nCustomAlert.defaultProps = {\r\n    message: '',        //  message needs to be shown in Alert.\r\n    title: '',          //  message Title default will be blank.\r\n    toggle: true,       //  default set to true to open Alert.\r\n    type: 'info'        //  in ['error', 'warning', 'info', 'success']\r\n}\r\n\r\nCustomAlert.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n    title: PropTypes.string,\r\n    toggle: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    callbackOnClose: PropTypes.func\r\n}\r\n\r\nexport default CustomAlert;","import { GET_COUPON_CATEGORIES_SUCCESS, CREATE_COUPON_SUCCESS, GET_COUPON_DETAILS_SUCCESS, TOGGLE_COUPON_REFRESH, RESET_COMPONENT_DATA, RESET_COUPON_VAR } from \"./constants\";\r\nimport { showLoader, hideLoader } from \"../../components/Loader/action\";\r\nimport handleError from \"../../errorHandler\";\r\nimport { getCouponsCategories, createCoupon, getCouponById, editCoupon } from \"../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport function getCategoriesAction() {\r\n    return (dispatch) => {\r\n        // dispatch(showLoader());\r\n        getCouponsCategories()\r\n            .then(response => {\r\n                // dispatch(hideLoader());\r\n                dispatch(getCouponsCategoriesSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getCouponsCategoriesSuccess(data) {\r\n    return {\r\n        type: GET_COUPON_CATEGORIES_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function createCouponAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        createCoupon(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(toggleCouponDataRefresh(true));\r\n                dispatch(createCouponSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function createCouponSuccess(data) {\r\n    return {\r\n        type: CREATE_COUPON_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function updateCouponAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        editCoupon(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(toggleCouponDataRefresh(true));\r\n                // dispatch(updateCouponSuccess(response.data));\r\n                dispatch(getCouponByIdSuccess(data));\r\n                response.data &&\r\n                    response.data.message &&\r\n                    toast.success(response.data.message);\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\n// export function updateCouponSuccess(data) {\r\n//     return {\r\n//         type: UPDATE_COUPON_SUCCESS,\r\n//         data\r\n//     }\r\n// }\r\n\r\nexport function getCouponByIdAction(data) {\r\n    return (dispatch) => {\r\n        dispatch(showLoader());\r\n        getCouponById(data)\r\n            .then(response => {\r\n                dispatch(hideLoader());\r\n                dispatch(getCouponByIdSuccess(response.data));\r\n            })\r\n            .catch(error => {\r\n                handleError(error, dispatch);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getCouponByIdSuccess(data) {\r\n    return {\r\n        type: GET_COUPON_DETAILS_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function toggleCouponDataRefresh(toggle) {\r\n    return {\r\n        type: TOGGLE_COUPON_REFRESH,\r\n        data: toggle\r\n    }\r\n}\r\n\r\nexport function resetCouponComponentAction() {\r\n    return {\r\n        type: RESET_COMPONENT_DATA\r\n    }\r\n}\r\n\r\nexport function resetAfterTheDataLoaded() {\r\n    return {\r\n        type: RESET_COUPON_VAR\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport { FormControl, InputLabel, Input, FormHelperText, Select, MenuItem, TextField } from '@material-ui/core';\r\n// import Grid from '@material-ui/core/Grid';\r\nimport { getCategoriesAction, getCouponByIdAction, createCouponAction, updateCouponAction, toggleCouponDataRefresh, resetAfterTheDataLoaded, resetCouponComponentAction } from './action';\r\nimport { decimalRegex } from '../../config/regex';\r\nimport Button from '../../components/Button';\r\nimport CustomAlert from '../../components/Alert';\r\n// import 'date-fns';\r\n// import DateFnsUtils from '@date-io/date-fns';\r\n// import {\r\n// MuiPickersUtilsProvider,\r\n//     // KeyboardTimePicker,\r\n//     KeyboardDatePicker,\r\n// } from '@material-ui/pickers';\r\n\r\nconst couponType = [{\r\n    id: 1,\r\n    label: \"Percentage\",\r\n    value: 1\r\n}, {\r\n    id: 2,\r\n    label: \"Flat Discount\",\r\n    value: 2\r\n}];\r\n\r\nclass CreateCoupon extends Component {\r\n    state = {\r\n        fields: {\r\n            coupon_type: 1,\r\n            coupon_classification: '',\r\n            coupon_code: '',\r\n            coupon_percentage: '',\r\n            coupon_accessories_percentage: '',\r\n            coupon_cot_percentage: '',\r\n            coupon_flat_discount: '',\r\n            coupon_max_discount: '',\r\n            coupon_min_amount: '',\r\n            start_date: '',\r\n            end_date: '',\r\n            coupon_description: ''\r\n        },\r\n        errors: {\r\n            coupon_type: '',\r\n            coupon_classification: '',\r\n            coupon_code: '',\r\n            coupon_percentage: '',\r\n            coupon_accessories_percentage: '',\r\n            coupon_cot_percentage: '',\r\n            coupon_flat_discount: '',\r\n            coupon_max_discount: '',\r\n            coupon_min_amount: '',\r\n            start_date: '',\r\n            end_date: '',\r\n            coupon_description: ''\r\n        },\r\n        valid: false,\r\n        gettingExistingCouponData: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { couponId } = this.props;\r\n        this.props.getCategoriesAction();\r\n        if (couponId) {\r\n            this.setState({ gettingExistingCouponData: true }, () => {\r\n                let payload = {\r\n                    coupon_id: couponId\r\n                }\r\n                this.props.getCouponByIdAction(payload);\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        let { gettingExistingCouponData, fields } = this.state;\r\n        let { couponData, couponId, reloadComponentWithFreshData } = props;\r\n        if (props.refreshData) {\r\n            console.log(\"Refreshing...\", props);\r\n            if (couponId) {\r\n                this.setState({ gettingExistingCouponData: true }, () => {\r\n                    let payload = {\r\n                        coupon_id: couponId\r\n                    }\r\n                    this.props.getCouponByIdAction(payload);\r\n                });\r\n            }\r\n            // else {\r\n            this.resetComponent();\r\n            // }\r\n            this.props.toggleCouponDataRefresh(false);\r\n        }\r\n        if ((gettingExistingCouponData || reloadComponentWithFreshData) && couponData) {\r\n            console.log(\"Executing...\");\r\n            //  set the existing coupon Data to the state to be shown in UI.\r\n            fields.coupon_type = couponData.coupon_type;\r\n            fields.coupon_classification = couponData.coupon_classification_id;\r\n            fields.coupon_code = couponData.coupon_code;\r\n            fields.coupon_percentage = String(couponData.coupon_percentage);\r\n            fields.coupon_accessories_percentage = String(couponData.coupon_accessories_percentage);\r\n            fields.coupon_cot_percentage = String(couponData.coupon_cot_percentage);\r\n            fields.coupon_flat_discount = String(couponData.coupon_flat_discount);\r\n            fields.coupon_max_discount = String(couponData.coupon_max_discount);\r\n            fields.coupon_min_amount = String(couponData.coupon_min_amount);\r\n            fields.start_date = couponData.start_date;\r\n            fields.end_date = couponData.end_date;\r\n            fields.coupon_description = couponData.coupon_description;\r\n\r\n\r\n            this.setState({ fields, gettingExistingCouponData: false }, () => {\r\n                this.props.resetAfterTheDataLoaded();\r\n                console.log(props, this.state);\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCouponComponentAction();\r\n    }\r\n\r\n    resetComponent = () => {\r\n        this.setState({\r\n            fields: {\r\n                coupon_type: '',\r\n                coupon_classification: '',\r\n                coupon_code: '',\r\n                coupon_percentage: '',\r\n                coupon_accessories_percentage: '',\r\n                coupon_cot_percentage: '',\r\n                coupon_flat_discount: '',\r\n                coupon_max_discount: '',\r\n                coupon_min_amount: '',\r\n                start_date: '',\r\n                end_date: '',\r\n                coupon_description: '',\r\n                ...this.props.couponData\r\n            },\r\n            errors: {\r\n                coupon_type: '',\r\n                coupon_classification: '',\r\n                coupon_code: '',\r\n                coupon_percentage: '',\r\n                coupon_accessories_percentage: '',\r\n                coupon_cot_percentage: '',\r\n                coupon_flat_discount: '',\r\n                coupon_max_discount: '',\r\n                coupon_min_amount: '',\r\n                start_date: '',\r\n                end_date: '',\r\n                coupon_description: ''\r\n            },\r\n            valid: false\r\n        })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let fieldName = event.target.name;\r\n        let fieldValue = event.target.value;\r\n        let { fields, errors } = this.state;\r\n\r\n        switch (fieldName) {\r\n\r\n            case 'coupon_type':\r\n                // fields.coupon_type = fieldValue;\r\n                if (fieldValue) {\r\n                    fields[fieldName] = fieldValue;\r\n                    errors[fieldName] = '';\r\n                } else {\r\n                    fields[fieldName] = '';\r\n                    errors[fieldName] = 'Coupon Type is Required!';\r\n                }\r\n                fields.coupon_classification = errors.coupon_classification = '';\r\n                fields.coupon_code = errors.coupon_code = '';\r\n                fields.coupon_percentage = errors.coupon_percentage = '';\r\n                fields.coupon_flat_discount = errors.coupon_flat_discount = '';\r\n                fields.coupon_max_discount = errors.coupon_max_discount = '';\r\n                fields.coupon_min_amount = errors.coupon_min_amount = '';\r\n                fields.start_date = errors.start_date = '';\r\n                fields.end_date = errors.end_date = '';\r\n                fields.coupon_description = errors.coupon_description = '';\r\n                break;\r\n\r\n            case 'coupon_code':\r\n                if (fieldValue) {\r\n                    fields[fieldName] = fieldValue;\r\n                    errors[fieldName] = '';\r\n                } else {\r\n                    fields[fieldName] = '';\r\n                    errors[fieldName] = 'Coupon Code is Required!';\r\n                }\r\n                break;\r\n\r\n            case 'coupon_percentage':\r\n            case 'coupon_flat_discount':\r\n            case 'coupon_max_discount':\r\n            case 'coupon_min_amount':\r\n            case 'coupon_accessories_percentage':\r\n            case 'coupon_cot_percentage':\r\n                let fieldsCanBeZero = ['coupon_accessories_percentage', 'coupon_cot_percentage', 'coupon_max_discount', 'coupon_min_amount'];\r\n\r\n                let fieldsCanContainAmount = ['coupon_max_discount', 'coupon_min_amount'];\r\n\r\n                let fieldNameText = fieldName === 'coupon_percentage' ? 'Coupon Percentage' :\r\n                    fieldName === 'coupon_max_discount' ? 'Max Discount for Coupon' :\r\n                        fieldName === 'coupon_min_amount' ? 'Min Cart Amount for Coupon' :\r\n                            fieldName === 'coupon_flat_discount' ? 'Coupon Flat Discount' :\r\n                                fieldName === 'coupon_accessories_percentage' ? 'Coupon Accessory Percentage' :\r\n                                    fieldName === 'coupon_cot_percentage' ? 'Coupon Cot Percentage' : '';\r\n\r\n                if (decimalRegex.test(fieldValue)) {\r\n                    let numberArray = String(fieldValue).split('.');\r\n                    if (Number(fields.coupon_type) === 1 && !fieldsCanContainAmount.includes(fieldName) && numberArray.length > 0 && numberArray[0].length <= 3) {\r\n                        fields[fieldName] = fieldValue;\r\n                        errors[fieldName] = (Number(fieldValue) === 0 &&\r\n                            fieldsCanBeZero.includes(fieldName)\r\n                        ) ||\r\n                            fieldValue > 100 ? `Invalid ${fieldNameText}` : '';\r\n                    } else if ((\r\n                        Number(fields.coupon_type) === 2 || fieldsCanContainAmount.includes(fieldName)\r\n                    ) && numberArray.length > 0 && numberArray[0].length <= 6) {\r\n                        fields[fieldName] = fieldValue;\r\n                        errors[fieldName] = (Number(fieldValue) === 0 &&\r\n                            fieldsCanBeZero.includes(fieldName)\r\n                        )\r\n                            ? `Invalid ${fieldNameText}` : '';\r\n                    }\r\n                } else if (fieldValue.length === 0) {\r\n                    fields[fieldName] = \"\";\r\n                    errors[fieldName] = `${fieldNameText} is Required!`;\r\n                }\r\n                break;\r\n            default:\r\n                fields[fieldName] = fieldValue;\r\n                errors[fieldName] = '';\r\n                break;\r\n        }\r\n        this.setState({ fields, errors }, () => console.log(this.state));\r\n    }\r\n\r\n    checkValidity = (event) => {\r\n        event.preventDefault();\r\n        let { fields, errors } = this.state;\r\n        let hasErrors = false, validForm = false;\r\n        let requiredFields = {\r\n            \"coupon_type\": \"Coupon Type\",\r\n            // \"coupon_classification\": \"Coupon Classification\",\r\n            \"coupon_code\": \"Coupon Name/ Code\",\r\n            \"coupon_max_discount\": \"Max Discount for Coupon\",\r\n            \"coupon_min_amount\": \"Min Cart Amount for Coupon\",\r\n            \"start_date\": \"Start Date\",\r\n            \"end_date\": \"End Date\"\r\n        }\r\n\r\n        if (Number(fields.coupon_type) === 1) {\r\n            if (!fields.coupon_percentage) {\r\n                requiredFields['coupon_percentage'] = 'Coupon Percentage';\r\n            }\r\n            if (!fields.coupon_accessories_percentage) {\r\n                requiredFields['coupon_accessories_percentage'] = 'Coupon Accessory Percentage';\r\n            }\r\n            if (!fields.coupon_cot_percentage) {\r\n                requiredFields['coupon_cot_percentage'] = 'Coupon Cot Percentage';\r\n            }\r\n        } else if (Number(fields.coupon_type) === 2) {\r\n            if (!fields.coupon_flat_discount) {\r\n                requiredFields['coupon_flat_discount'] = 'Coupon Flat Discount';\r\n            }\r\n        }\r\n\r\n        Object.keys(requiredFields).map((key, index) => {\r\n            if (!fields[key]) {\r\n                errors[key] = `${requiredFields[key]} is Required!`;\r\n            }\r\n            return \"\";\r\n        });\r\n\r\n        validForm = Object.keys(requiredFields).every(field => fields[field] && fields[field] !== \"\");\r\n        hasErrors = Object.keys(errors).some(field => errors[field] && errors[field] !== \"\");\r\n\r\n        this.setState({\r\n            fields,\r\n            errors,\r\n            valid: validForm && !hasErrors\r\n        }, () => {\r\n            console.log(this.state);\r\n            if (this.state.valid) {\r\n                this.handleSubmit();\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        let { fields } = this.state;\r\n        let { userDetails } = this.props;\r\n        if (this.props.couponId && this.props.updateCouponAction) {\r\n            fields['updated_by'] = userDetails ? userDetails.login_id : 0;\r\n            this.props.updateCouponAction({\r\n                ...fields,\r\n                // coupon_id: Number(this.props.couponId) \r\n            });\r\n        } else if (this.props.createCouponAction) {\r\n            fields['created_by'] = userDetails ? userDetails.login_id : 0;\r\n            this.props.createCouponAction(fields);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { couponId, couponData } = this.props;\r\n        let title = `${couponId ? 'Update' : 'Create'} Coupon ${couponData && couponData.coupon_uid ? `- ${couponData.coupon_uid}` : ''}`;\r\n        let { fields, errors } = this.state;\r\n        let { categories, successData } = this.props;\r\n        console.log(\"Rendering...\", this.props);\r\n        return (\r\n            <div className=\"coupon-container\">\r\n                <PageHeader\r\n                    header={title}\r\n                />\r\n                <div className=\"coupon-content\">\r\n                    {successData &&\r\n                        successData.data &&\r\n                        successData.data.coupon_uid &&\r\n                        <CustomAlert\r\n                            message={`Coupon Created successfully with Coupon Id: ${successData.data.coupon_uid}`}\r\n                        />\r\n                    }\r\n\r\n                    <form className=\"coupon-form\">\r\n                        {/* <MuiPickersUtilsProvider utils={DateFnsUtils}> */}\r\n                        <div className=\"coupon-dropdown-container\">\r\n                            <FormControl className=\"select-container coupon-discout-field\" error={errors.coupon_type}>\r\n                                <InputLabel id=\"coupon-type-label\">Coupon Type</InputLabel>\r\n                                <Select\r\n                                    labelId=\"coupon-type-label\"\r\n                                    id=\"coupon_type\"\r\n                                    name=\"coupon_type\"\r\n                                    value={fields.coupon_type}\r\n                                    onChange={this.handleChange}\r\n                                >\r\n                                    <MenuItem value={\"\"}>Select</MenuItem>\r\n                                    {couponType.map((type, index) => <MenuItem value={type.value}>{type.label}</MenuItem>)}\r\n                                </Select>\r\n                                <FormHelperText id=\"coupon_type\">{errors.coupon_type}</FormHelperText>\r\n                            </FormControl>\r\n\r\n                            <FormControl className=\"select-container coupon-discout-field\" error={errors.coupon_classification}>\r\n                                <InputLabel id=\"coupon-classification-label\">Coupon Classification</InputLabel>\r\n                                <Select\r\n                                    labelId=\"coupon-classification-label\"\r\n                                    id=\"coupon_classification\"\r\n                                    name=\"coupon_classification\"\r\n                                    value={fields.coupon_classification}\r\n                                    onChange={this.handleChange}\r\n                                >\r\n                                    <MenuItem value={\"\"}>Select</MenuItem>\r\n                                    {categories &&\r\n                                        Array.isArray(categories) &&\r\n                                        categories.map((classification, index) =>\r\n                                            <MenuItem value={classification.id}>{classification.name}</MenuItem>)\r\n                                    }\r\n                                </Select>\r\n                                <FormHelperText id=\"coupon_classification\">{errors.coupon_classification}</FormHelperText>\r\n                            </FormControl>\r\n\r\n                            <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.coupon_code}>\r\n                                <InputLabel htmlFor=\"coupon_code\">Coupon Code</InputLabel>\r\n                                <Input\r\n                                    id=\"coupon_code\"\r\n                                    name=\"coupon_code\"\r\n                                    type=\"text\"\r\n                                    value={fields.coupon_code}\r\n                                    onChange={this.handleChange}\r\n                                    aria-describedby=\"coupon_code\"\r\n                                    fullWidth={true}\r\n                                    disabled={couponId && fields.coupon_code}\r\n                                />\r\n                                <FormHelperText id=\"coupon_code\">{errors.coupon_code}</FormHelperText>\r\n                            </FormControl>\r\n                        </div>\r\n\r\n                        <div className=\"coupon-discout-container\">\r\n                            {Number(fields.coupon_type) === 2 ?\r\n                                <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.coupon_flat_discount}>\r\n                                    <InputLabel htmlFor=\"coupon_flat_discount\">Coupon Flat Discount (Numeric)</InputLabel>\r\n                                    <Input\r\n                                        id=\"coupon_flat_discount\"\r\n                                        name=\"coupon_flat_discount\"\r\n                                        type=\"text\"\r\n                                        value={fields.coupon_flat_discount}\r\n                                        onChange={this.handleChange}\r\n                                        aria-describedby=\"coupon_flat_discount\"\r\n                                        fullWidth={true}\r\n                                    />\r\n                                    <FormHelperText id=\"coupon_flat_discount\">{errors.coupon_flat_discount}</FormHelperText>\r\n                                </FormControl>\r\n                                :\r\n                                <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.coupon_percentage}>\r\n                                    <InputLabel htmlFor=\"coupon_percentage\">Coupon Percentage* (% - Numeric)</InputLabel>\r\n                                    <Input\r\n                                        id=\"coupon_percentage\"\r\n                                        name=\"coupon_percentage\"\r\n                                        type=\"text\"\r\n                                        value={fields.coupon_percentage}\r\n                                        onChange={this.handleChange}\r\n                                        aria-describedby=\"coupon_percentage\"\r\n                                        fullWidth={true}\r\n                                    />\r\n                                    <FormHelperText id=\"coupon_percentage\">{errors.coupon_percentage}</FormHelperText>\r\n                                </FormControl>}\r\n\r\n                            {Number(fields.coupon_type) === 1 && <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.coupon_accessories_percentage}>\r\n                                <InputLabel htmlFor=\"coupon_accessories_percentage\">Coupon Accessory Percentage</InputLabel>\r\n                                <Input\r\n                                    id=\"coupon_accessories_percentage\"\r\n                                    name=\"coupon_accessories_percentage\"\r\n                                    type=\"text\"\r\n                                    value={fields.coupon_accessories_percentage}\r\n                                    onChange={this.handleChange}\r\n                                    aria-describedby=\"coupon_accessories_percentage\"\r\n                                    fullWidth={true}\r\n                                />\r\n                                <FormHelperText id=\"coupon_accessories_percentage\">{errors.coupon_accessories_percentage}</FormHelperText>\r\n                            </FormControl>}\r\n\r\n                            {Number(fields.coupon_type) === 1 && <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.coupon_cot_percentage}>\r\n                                <InputLabel htmlFor=\"coupon_cot_percentage\">Coupon Cot Percentage</InputLabel>\r\n                                <Input\r\n                                    id=\"coupon_cot_percentage\"\r\n                                    name=\"coupon_cot_percentage\"\r\n                                    type=\"text\"\r\n                                    value={fields.coupon_cot_percentage}\r\n                                    onChange={this.handleChange}\r\n                                    aria-describedby=\"coupon_cot_percentage\"\r\n                                    fullWidth={true}\r\n                                />\r\n                                <FormHelperText id=\"coupon_cot_percentage\">{errors.coupon_cot_percentage}</FormHelperText>\r\n                            </FormControl>}\r\n\r\n                            <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.coupon_max_discount}>\r\n                                <InputLabel htmlFor=\"coupon_max_discount\">Max Discount for Coupon</InputLabel>\r\n                                <Input\r\n                                    id=\"coupon_max_discount\"\r\n                                    name=\"coupon_max_discount\"\r\n                                    type=\"text\"\r\n                                    value={fields.coupon_max_discount}\r\n                                    onChange={this.handleChange}\r\n                                    aria-describedby=\"coupon_max_discount\"\r\n                                    fullWidth={true}\r\n                                />\r\n                                <FormHelperText id=\"coupon_max_discount\">{errors.coupon_max_discount}</FormHelperText>\r\n                            </FormControl>\r\n\r\n                            <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.coupon_min_amount}>\r\n                                <InputLabel htmlFor=\"coupon_min_amount\">Min Cart Amount for Coupon</InputLabel>\r\n                                <Input\r\n                                    id=\"coupon_min_amount\"\r\n                                    name=\"coupon_min_amount\"\r\n                                    type=\"text\"\r\n                                    value={fields.coupon_min_amount}\r\n                                    onChange={this.handleChange}\r\n                                    aria-describedby=\"coupon_min_amount\"\r\n                                    fullWidth={true}\r\n                                />\r\n                                <FormHelperText id=\"coupon_min_amount\">{errors.coupon_min_amount}</FormHelperText>\r\n                            </FormControl>\r\n                        </div>\r\n\r\n                        <div className=\"date-desc-container\">\r\n                            <div className=\"date-container\">\r\n                                <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.start_date}>\r\n                                    {/* <InputLabel htmlFor=\"start_date\">Start Date</InputLabel> */}\r\n                                    <TextField\r\n                                        id=\"start_date\"\r\n                                        name=\"start_date\"\r\n                                        label=\"Start Date\"\r\n                                        type=\"date\"\r\n                                        value={fields.start_date}\r\n                                        onChange={this.handleChange}\r\n                                        aria-describedby=\"start_date\"\r\n                                        fullWidth={true}\r\n                                        // inputProps={{ max: getTodayDate() }}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                    />\r\n                                    <FormHelperText id=\"start_date\">{errors.start_date}</FormHelperText>\r\n                                </FormControl>\r\n\r\n                                <FormControl className=\"full-width form-control-custom coupon-discout-field\" error={errors.end_date}>\r\n                                    {/* <InputLabel htmlFor=\"end_date\">End Date</InputLabel> */}\r\n                                    <TextField\r\n                                        id=\"end_date\"\r\n                                        name=\"end_date\"\r\n                                        label=\"End Date\"\r\n                                        type=\"date\"\r\n                                        value={fields.end_date}\r\n                                        onChange={this.handleChange}\r\n                                        aria-describedby=\"end_date\"\r\n                                        fullWidth={true}\r\n                                        // inputProps={{ max: getTodayDate() }}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                    />\r\n                                    <FormHelperText id=\"end_date\">{errors.end_date}</FormHelperText>\r\n                                </FormControl>\r\n                            </div>\r\n                            <div className=\"text-area-desc-container\">\r\n                                <div className=\"label\">Description</div>\r\n                                <textarea\r\n                                    name=\"coupon_description\"\r\n                                    className=\"input-field text-area-desc\"\r\n                                    aria-label=\"minimum height\"\r\n                                    rowsMin={3}\r\n                                    // placeholder=\"coupon_description\"\r\n                                    value={fields.coupon_description}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"button-container\">\r\n                            <Button\r\n                                label={'Submit'}\r\n                                // disabled={this.state.valid}\r\n                                onClick={this.checkValidity}\r\n                            />\r\n                        </div>\r\n\r\n                        {/* <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"MM/dd/yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"start_date\"\r\n                            name=\"start_date\"\r\n                            label=\"Start Date\"\r\n                            value={fields.start_date}\r\n                            onChange={this.handleChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n\r\n                        <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"MM/dd/yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"end_date\"\r\n                            name=\"end_date\"\r\n                            label=\"Date picker inline\"\r\n                            value={fields.end_date}\r\n                            onChange={this.handleChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        /> */}\r\n\r\n                        {/* </MuiPickersUtilsProvider> */}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        userDetails: state.userDetails,\r\n        categories: state.couponsDetails.couponCategories,\r\n        refreshData: state.couponsDetails.refreshData,\r\n        reloadComponentWithFreshData: state.couponsDetails.reloadComponentWithFreshData,\r\n        successData: state.couponsDetails.successData,\r\n        couponData: state.couponsDetails.couponData,\r\n        resetCouponData: state.couponsDetails.resetCouponData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ getCategoriesAction, getCouponByIdAction, createCouponAction, updateCouponAction, toggleCouponDataRefresh, resetAfterTheDataLoaded, resetCouponComponentAction }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateCoupon);"],"sourceRoot":""}